@using LAHJA.Data.UI.Components

@typeparam T

<MudTable T="T" Items="@DataBuild" Hover="true" Dense="false" FixedHeader="@FixedHeader"
          Style="@(FixedHeader ? "height:300px;" : "")"
          OnRowClick="HandleRowClick"
          OnSelectedItemsChanged="HandleSelectedItemsChanged"
          OnSortChanged="HandleSortChanged"
          OnPageChanged="HandlePageChanged"
          MultiSelection="@MultiSelection"
          RowStyle="RowStyle">

    <HeaderContent>
       

        @foreach (var column in (LabelColumns.Count > 0?LabelColumns: Columns))
        {
            <MudTh>@column</MudTh>
        }
                  </HeaderContent>

    <ToolBarContent>
        
    </ToolBarContent>

    <ColGroup>
       
    </ColGroup>

    <RowTemplate>
     
            @foreach (var column in Columns)
            {
                <MudTd>@GetPropertyValue(context, column)</MudTd>
            }
    
    </RowTemplate>

</MudTable>

@code {
    [Parameter] public List<T>? DataBuild { get; set; } = new();
    [Parameter] public bool FixedHeader { get; set; } = true;
    [Parameter] public bool MultiSelection { get; set; } = false;
    [Parameter] public EventBuildTabelCard<T>? Events { get; set; }

    

    [Parameter] public List<string> LabelColumns { get; set; } = new();
    private string SearchText { get; set; } = "";

    public List<string> Columns { get; set; } = new();
    protected override void OnParametersSet()
    {
        if ( DataBuild.Any())
        {
            Columns = typeof(T).GetProperties().Select(p => p.Name).ToList();
        }
    }

    private object GetPropertyValue(T item, string propertyName)
    {
        var prop = typeof(T).GetProperty(propertyName);
        return prop?.GetValue(item) ?? "-";
    }

    private Task HandleRowClick(TableRowClickEventArgs<T> args)
    {    
        return Events.OnRowClicked.InvokeAsync(args.Item);
    }

    private Task HandleSelectedItemsChanged(HashSet<T> selectedItems)
    {
        return Events.OnSelectedItemsChanged.InvokeAsync(selectedItems);
    }

    private Task HandleSortChanged(SortDirection sortDirection)
    {
        return Events.OnSortChanged.InvokeAsync(sortDirection);
    }

    private Task HandlePageChanged(int pageNumber)
    {
        return Events.OnPageChanged.InvokeAsync(pageNumber);
    }

    private void TriggerSearch()
    {
        Events.OnSearch.InvokeAsync(SearchText);
    }

    private void RefreshData()
    {
        StateHasChanged();
    }

    private string RowStyle(T item, int rowIndex)
    {
        return Events.OnRowRender != null ? Events.OnRowRender(item, rowIndex) : (rowIndex % 2 == 0 ? "background-color: #f9f9f9;" : "");
    }
}
