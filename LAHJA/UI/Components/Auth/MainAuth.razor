@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations

@using LAHAJ.Loading
@using LAHJA.Them
@using LAHJA.UI.Components.Auth
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation;
@inject ISnackbar Snackbar

@using LAHJA.Data.UI.Components.Base
@using global::Shared.Constants.Router

@if (isLoading)
{
    <Loading IsLoading="isLoading" />
}else{


<MudContainer class="cuntrer " style="display:flex;justify-content:center;direction:ltr !important">

    <div style="padding:2% 2% " class="c-auth-main">
                 
                <div class="RCardP fsing">
           
                    <div id="signupModalFormSignup" data-hs-show-animation-target-group="idForm" style="display: block; opacity: 1.0175;">
                        <!-- Heading -->
                        <div class="text-center mb-7">
                            <h3>   @(nameAuth[indexAuth])</h3>
                            <p>
                                Already have an account?
                                <MudButton Variant="Variant.Text"
                                           OnClick="ChangeAuth"
                                           Color="@AppColors.BASE_COLOR_ENUM"
                                           Style="text-transform:none">
                                    @(nameAuth[1 - indexAuth])
                                </MudButton>
                            </p>
                        </div>
                        <!-- End Heading -->

                        <MudDivider />
                        <br />

                        <div class="d-grid gap-3">
                            @if (isshowmian)
                            {

                                <MudButton Variant="Variant.Outlined" OnClick="onClickGoogleAccount"
                                         
                                           Color="@AppColors.BASE_COLOR_ENUM">
                                    <img style="width: 1rem; height: 1rem;margin-right:10px" src="css/google-icon.svg" alt="Image Description">

                                    @nameAuth[indexAuth] with Google
                                </MudButton>
                                <MudButton Variant="Variant.Outlined" OnClick="onClickFacebookAccount"
                                           Color="@AppColors.BASE_COLOR_ENUM">
                                    <img style="width: 1.5rem; height: 1.5rem;margin-right:10px" src="css/fb-icon.svg" alt="Image Description">

                                    @nameAuth[indexAuth] with Facebook
                                </MudButton>
                             
                                <MudButton OnClick="ClickFormEmaill"
                                           Variant="Variant.Filled"
                                           Color="@AppColors.BASE_COLOR_ENUM">
                                    @nameAuth[indexAuth] with Email
                                </MudButton>

                              @* <MudButton OnClick="OnSubmitReSendConfirmEmail" Color="Color.Primary"> Resend Confirm Email</MudButton> *@
                            }
                            else
                            {
                                <TemplateAuthForm IsLogin=@(indexAuth==1) 
                                    ErrorMessages="errorMessages"
                                          OnSubmit="OnSubmitLoginOrRegister"
                                     OnSubmitedForgetPassword="OnSubmitedForgetPassword"
                                     OnSubmitConfirmEmail="OnSubmitConfirmEmail"
                                     OnSubmitReSendConfirmEmail="OnSubmitReSendConfirmEmail"
                                     OnSubmitResetPassword="OnSubmitResetPassword"

                                     
                                    />
                            }
                            <br />
                            <MudDivider />
                            <br />
                            <div class="text-center">
                                <p class="small mb-0">By continuing you agree to our <a href="#">Terms and Conditions</a></p>
                            </div>
                        </div>
                    </div>






                </div>


            </div>
            
   
        </MudContainer>

}



@code {

    bool isLoading = true;

    [Parameter] public EventCallback<DataBuildAuthBase> OnSubmit { get; set; }
    [Parameter] public EventCallback<DataBuildAuthBase> OnSubmitedForgetPassword { get; set; }
    [Parameter] public EventCallback<DataBuildAuthBase> OnSubmitConfirmEmail { get; set; }
    [Parameter] public EventCallback<DataBuildAuthBase> OnSubmitReSendConfirmEmail { get; set; }
    [Parameter] public EventCallback<DataBuildAuthBase> OnSubmitResetPassword { get; set; }
    [Parameter] public List<string> ErrorMessages{ get=>errorMessages; set
        {
            if(value!=null)
            {
                errorMessages = value;
                if(value.Count()>0)
                    isshowmian = false;
                // StateHasChanged();
            }
        } }
    private bool isVisible = true;
    private DialogOptions dialogOptions = new() { CloseButton = true };
    [Parameter]
    public bool IsToLoginMode
    {
        set
        {
            _isToLogin = value;
            if (_isToLogin)
            {
                indexAuth = 1 - indexAuth;
                isshowmian = true;
            }
        }
        get { return _isToLogin; }
    }

    bool success;
    bool _isToLogin = false;
    string[] errors = { };
    MudTextField<string> pwField1;
    MudForm form;
    bool isshowmian = true;
    string[] nameAuth = { "Sign up", "Login" };
    int indexAuth = 0;
    // bool toLoginMode = false;
    List<string> errorMessages { get; set; } = new List<string>();

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            isLoading = false;
            StateHasChanged();
        }
    }


    void ChangeAuth()
    {

        if (!IsToLoginMode)
            Navigation.NavigateTo(RouterPage.LOGIN, forceLoad: true);
        else 
            Navigation.NavigateTo(RouterPage.REGISTER, forceLoad: true);

        StateHasChanged();
    }

    void onClickFacebookAccount()
    {

        Navigation.NavigateTo("https://asg-api.runasp.net/api/ExternalLogin?provider=Google&returnUrl=http%3A%2F%2Flahja.runasp.net");
        // if (indexAuth == 1)
        //     Navigation.NavigateTo("https://www.facebook.com/login");
        // else
        //     Navigation.NavigateTo("https://www.facebook.com/r.php");
    }    
    void onClickGoogleAccount()
    {

        Navigation.NavigateTo("https://asg-api.runasp.net/api/ExternalLogin?provider=Google&returnUrl=http%3A%2F%2Flahja.runasp.net");

        // if (indexAuth == 1)
        //     Navigation.NavigateTo("https://accounts.google.com/ServiceLogin");
        // else
        //     Navigation.NavigateTo("https://accounts.google.com/signup");
    }



    void ClickFormEmaill()
    {
        isshowmian = false;
        StateHasChanged();
    }


    private  async Task OnSubmitLoginOrRegister(DataBuildAuthBase data)
    {
        isLoading = true;
        StateHasChanged();

        if (OnSubmit.HasDelegate)
        {
            await OnSubmit.InvokeAsync(data);
        }
    }



   
 
    

}




