@using System.ComponentModel.DataAnnotations
@using LAHJA.Data.UI.Components.Base
@using global::Shared.Constants
@using global::Shared.Constants._Messages
@using global::Shared.Wrapper


@using LAHJA.Them

@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject IDialogService DialogService


@* <MudDialog Class="col-5" Style="width:40% !important"   DefaultFocus="DefaultFocus.LastChild" @bind-IsVisible=_isVisible>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <h4 class="d-flex align-center justify-content-center flex-column">
                @MapperMessages.Map(TitleLabels.FORGET_PASSWORD_AR, TitleLabels.FORGET_PASSWORD_EN)</h4>
        </MudText>
    </TitleContent>
    <DialogActions>

    </DialogActions> *@
    @* <DialogContent> *@
@if (Message==null){
        <MudContainer  class="w-100 border  d-flex align-center justify-content-center flex-column">


            <MudForm Style="width:100% !important" @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                <div class="d-flex align-center justify-content-center flex-column" style="padding:2% 2%;margin:auto 10px;width:100% !important ">
                   
                    <MudText> @MapperMessages.Map(ExplanatoryMessages.ENTER_YOUR_ACCOUNT_TOSEARCH_AR, ExplanatoryMessages.ENTER_YOUR_ACCOUNT_TOSEARCH_EN) </MudText>
                    <MudTextField T="string" Class="my-5" FullWidth Label="Email" Required="true"  RequiredError="Email is required!"
                    Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})" @bind-Value="@email" />

                    <MudButton Variant="Variant.Filled" FullWidth Color="@AppColors.BASE_COLOR_ENUM" OnClick="onSubmitConfirmEmail" Class="ml-auto my-5">
                        @MapperMessages.Map(TitleLabels.SEND_VERIFICATION_LINK_VIA_EMAIL_AR,TitleLabels.SEND_VERIFICATION_LINK_VIA_EMAIL_EN)</MudButton>

                </div>
            </MudForm>

    </MudContainer>
}
else
{
     <MudText>@Message</MudText>
}
@*     </DialogContent>

</MudDialog>
 *@




@code {
    private bool _licenseAccepted = false;





    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public EventCallback<DataBuildAuthBase> OnSubmited { get; set; }

    [Parameter] public string Message { get; set; }

    [Parameter] public bool IsDisplay { get => _isVisible; set {
            _isVisible = value;
            StateHasChanged();
        }}


    [Parameter] public string[] Errors { get => errors; set => errors = value; }

    private bool success;
    private bool _isVisible = false;
    private string[] errors = { };
    private MudForm form;
    private string email;



    private async Task OpenDialogAsync()
    {


        var title = MapperMessages.Map(SuccessMessages.LINK_SENT_SUCCESSFULLY_AR,
                    SuccessMessages.LINK_SENT_SUCCESSFULLY_EN);
        var parameters = new DialogParameters
        {
            { "Title",title },
            { "Message", MapperMessages.Map(ExplanatoryMessages.CLICK_VERIFICATION_LINK_VIA_EMAIL_AR,
                            ExplanatoryMessages.CLICK_VERIFICATION_LINK_VIA_EMAIL_EN) }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = DialogService.Show<DialogBox>("", parameters, options);
        var result = await dialog.Result;

     
    }

    private async Task onSubmitConfirmEmail()
    {
        try
        {
            await form.Validate();
            if (success)
            {



                if (!string.IsNullOrEmpty(email) && OnSubmited.HasDelegate)
                {

                    // OnSubmited(email);
                    await OnSubmited.InvokeAsync(new DataBuildAuthBase{Email=email} );

                }

            }

        }catch(Exception e)
        {
            // MudDialog.Close(DialogResult.Cancel());
        }
    }

  
}
