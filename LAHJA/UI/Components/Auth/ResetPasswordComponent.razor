

@using LAHJA.Data.UI.Components.Base
@using MudBlazor
@using System.ComponentModel.DataAnnotations
@* @inherits LayoutComponentBase *@
@inherits CardAuth<DataBuildAuthBase>

@* 
<MudDialog Class="col-5" DefaultFocus="DefaultFocus.LastChild">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <h4 class="d-flex align-center justify-content-center flex-column">
                Reset Password
            </h4>
        </MudText>
    </TitleContent>
    <DialogActions>

    </DialogActions>

    <DialogContent> *@

     

<MudContainer MaxWidth="MaxWidth.Medium"  class="col-lg-5 col-md-9 col-sm-12  d-flex align-center justify-content-center flex-column">

    <MudText Typo="Typo.h6">
        <h4 class="d-flex align-center justify-content-center flex-column"> Reset Password</h4>
    </MudText>
  

            @*     <MudText Typo="Typo.h6">
                    <h4 class="d-flex align-center justify-content-center flex-column">  Reset Password  </h4>
                </MudText> *@
                @* <MudConta Variant="H4" Align="Center"></MudConta> *@
        
                @if (isLoading)
                {
                    <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
                }

                @if (!isLoading && errors != null)
                {
                    @foreach (var messsage in errors)
                    {
                          <MudAlert Severity="Severity.Error">@messsage</MudAlert>
                    }
                }

 <MudForm Style="width:100% !important" @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">

        <MudTextField T="string" InputType="InputType.Hidden"  Class="my-5" FullWidth  Required="true" RequiredError="Email is required!"
                              Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})" @bind-Value="@email" />

                <MudTextField InputType="InputType.Hidden" @bind-Value="code"   Required="true" Class="mt-4" />
    
                @* <MudTextField @bind-Value="password" Label="New Password" Type="password" Required="true" Class="mt-4" /> *@
                <MudTextField T="string" Label="Password" HelperText="Choose a strong password" @ref="pwField1"
                              InputType="InputType.Password"
                              Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                              RequiredError="Password is required!" @bind-Value="@password" />

            
                
        

                <MudCardActions Class="col-12 row mt-5 d-flex flex-wrap justify-content-between align-content-between">
                    <MudButton Variant="Variant.Filled" Color="@Color.Primary" Class="col-lg-3 col-md-7 col-sm-12" OnClick="OnResetPassword" Disabled="isLoading">
                        Reset Password
                    </MudButton>
                    <MudButton OnClick="onCloseDialog" Class="col-lg-4 col-md-7 col-sm-12" Variant="Variant.Text" Color="Color.Secondary">Cancel</MudButton>
                </MudCardActions>
      
   </MudForm>
          
        </MudContainer>
@*     </DialogContent>
</MudDialog>
 *@
@code{

    [Parameter] public string Email { get; set; }

    [Parameter] public string Code { get; set; }

    protected override void OnInitialized()

    {



        if (Email != null)

        {



            if (Code != null)
            {

                email = Email;

                code = Code;

                StateHasChanged();

            }

        }

        base.OnInitialized();

    }



    protected async Task OnResetPassword()
    {
        if (OnSubmitResetPassword.HasDelegate)
        {
            await OnSubmitResetPassword.InvokeAsync(new DataBuildAuthBase{ Email=email,Password=password,Code=code});
        }
    }

}

@* 
<h3>ResendConfirmationEmail</h3>
<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-4">
    <MudPaper Class="pa-4">
        @* <MudTypography Variant="H5" Align="Center">مرحباً بك في مكوّن MudBlazor</MudTypography> *@
        
     @*    <MudAlert Severity="Error" Style="display:@(ErrorMessage != null ? "block" : "none")">
            @ErrorMessage
        </MudAlert>

        <MudTextField @bind-Value="InputValue" Label="أدخل النص هنا" Placeholder="اكتب شيئًا..." Immediate="true" Adornment="Adornment.Start">
            <AdornmentIcon>text_fields</AdornmentIcon>
        </MudTextField>

        <MudButton Variant="Filled" Color="Primary" Class="mt-4" OnClick="ProcessInput">تنفيذ</MudButton>

        <MudSpacer />

        <MudList>
            @foreach (var result in Results)
            {
                <MudListItem>
                    <MudText>✅ @result</MudText>
                </MudListItem>
            }
        </MudList> *@
 @*    </MudPaper>
</MudContainer> *@

@code {
    // private string? InputValue;
    // private List<string> Results = new();
    // private string? ErrorMessage;

    // private async Task ProcessInput()
    // {
    //     try
    //     {
    //         ErrorMessage = null;

    //         if (string.IsNullOrWhiteSpace(InputValue))
    //         {
    //             throw new InvalidOperationException("الحقل لا يمكن أن يكون فارغاً.");
    //         }

    //         // Simulate processing input
    //         await Task.Delay(500);
    //         Results.Add($"تمت معالجة: {InputValue}");

    //         // Reset input
    //         InputValue = string.Empty;
    //     }
    //     catch (Exception ex)
    //     {
    //         ErrorMessage = ex.Message;
    //     }
    // }
}
 
