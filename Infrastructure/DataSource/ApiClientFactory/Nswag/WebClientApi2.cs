////----------------------
//// <auto-generated>
////     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
//// </auto-generated>
////----------------------

//#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
//#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
//#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
//#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
//#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
//#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
//#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
//#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

//namespace Infrastructure.Nswag
//{
//    using System = global::System;

//    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class AuthClient
//    {
//        private System.Net.Http.HttpClient _httpClient;
//        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

//        public AuthClient(System.Net.Http.HttpClient httpClient)
//        {
//            _httpClient = httpClient;
//            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings);
//        }

//        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
//        {
//            var settings = new System.Text.Json.JsonSerializerOptions();
//            UpdateJsonSerializerSettings(settings);
//            return settings;
//        }

//        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

//        partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
//        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task LogoutAsync(object body)
//        {
//            return LogoutAsync(body, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task LogoutAsync(object body, System.Threading.CancellationToken cancellationToken)
//        {
//            if (body == null)
//                throw new System.ArgumentNullException("body");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/logout");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = System.Text.Json.JsonSerializer.Serialize(body, _settings.Value);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("POST");

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            return;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task RegisterAsync(RegisterRequest body)
//        {
//            return RegisterAsync(body, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task RegisterAsync(RegisterRequest body, System.Threading.CancellationToken cancellationToken)
//        {
//            if (body == null)
//                throw new System.ArgumentNullException("body");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/register");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = System.Text.Json.JsonSerializer.Serialize(body, _settings.Value);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("POST");

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            return;
//                        }
//                        else
//                        if (status_ == 400)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.IDictionary<string, System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>>>>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<System.Collections.Generic.IDictionary<string, System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>>>>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<AccessTokenResponse> LoginAsync(bool? useCookies, bool? useSessionCookies, LoginRequest body)
//        {
//            return LoginAsync(useCookies, useSessionCookies, body, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<AccessTokenResponse> LoginAsync(bool? useCookies, bool? useSessionCookies, LoginRequest body, System.Threading.CancellationToken cancellationToken)
//        {
//            if (body == null)
//                throw new System.ArgumentNullException("body");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/login?");
//            if (useCookies != null)
//            {
//                urlBuilder_.Append(System.Uri.EscapeDataString("useCookies") + "=").Append(System.Uri.EscapeDataString(ConvertToString(useCookies, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//            }
//            if (useSessionCookies != null)
//            {
//                urlBuilder_.Append(System.Uri.EscapeDataString("useSessionCookies") + "=").Append(System.Uri.EscapeDataString(ConvertToString(useSessionCookies, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//            }
//            urlBuilder_.Length--;

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = System.Text.Json.JsonSerializer.Serialize(body, _settings.Value);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("POST");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<AccessTokenResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        if (status_ == 400)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.IDictionary<string, System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>>>>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<System.Collections.Generic.IDictionary<string, System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>>>>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<AccessTokenResponse> RefreshAsync(RefreshRequest body)
//        {
//            return RefreshAsync(body, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<AccessTokenResponse> RefreshAsync(RefreshRequest body, System.Threading.CancellationToken cancellationToken)
//        {
//            if (body == null)
//                throw new System.ArgumentNullException("body");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/refresh");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = System.Text.Json.JsonSerializer.Serialize(body, _settings.Value);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("POST");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<AccessTokenResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task CustomMapIdentityApiApi_confirmEmailAsync(ConfirmEmailRequest body)
//        {
//            return CustomMapIdentityApiApi_confirmEmailAsync(body, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task CustomMapIdentityApiApi_confirmEmailAsync(ConfirmEmailRequest body, System.Threading.CancellationToken cancellationToken)
//        {
//            if (body == null)
//                throw new System.ArgumentNullException("body");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/confirmEmail");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = System.Text.Json.JsonSerializer.Serialize(body, _settings.Value);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("POST");

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            return;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<string> ResendConfirmationEmailAsync(ResendConfirmationEmailRequest body)
//        {
//            return ResendConfirmationEmailAsync(body, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<string> ResendConfirmationEmailAsync(ResendConfirmationEmailRequest body, System.Threading.CancellationToken cancellationToken)
//        {
//            if (body == null)
//                throw new System.ArgumentNullException("body");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/resendConfirmationEmail");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = System.Text.Json.JsonSerializer.Serialize(body, _settings.Value);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("POST");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        if (status_ == 400)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task ForgotPasswordAsync(ForgotPasswordRequest body)
//        {
//            return ForgotPasswordAsync(body, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task ForgotPasswordAsync(ForgotPasswordRequest body, System.Threading.CancellationToken cancellationToken)
//        {
//            if (body == null)
//                throw new System.ArgumentNullException("body");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/forgotPassword");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = System.Text.Json.JsonSerializer.Serialize(body, _settings.Value);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("POST");

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            return;
//                        }
//                        else
//                        if (status_ == 400)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task ResetPasswordAsync(ResetPasswordRequest body)
//        {
//            return ResetPasswordAsync(body, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task ResetPasswordAsync(ResetPasswordRequest body, System.Threading.CancellationToken cancellationToken)
//        {
//            if (body == null)
//                throw new System.ArgumentNullException("body");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/resetPassword");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = System.Text.Json.JsonSerializer.Serialize(body, _settings.Value);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("POST");

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            return;
//                        }
//                        else
//                        if (status_ == 400)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        protected struct ObjectResponseResult<T>
//        {
//            public ObjectResponseResult(T responseObject, string responseText)
//            {
//                this.Object = responseObject;
//                this.Text = responseText;
//            }

//            public T Object { get; }

//            public string Text { get; }
//        }

//        public bool ReadResponseAsString { get; set; }

//        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
//        {
//            if (response == null || response.Content == null)
//            {
//                return new ObjectResponseResult<T>(default(T), string.Empty);
//            }

//            if (ReadResponseAsString)
//            {
//                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
//                try
//                {
//                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
//                    return new ObjectResponseResult<T>(typedBody, responseText);
//                }
//                catch (System.Text.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
//                }
//            }
//            else
//            {
//                try
//                {
//                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
//                    {
//                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
//                        return new ObjectResponseResult<T>(typedBody, string.Empty);
//                    }
//                }
//                catch (System.Text.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
//                }
//            }
//        }

//        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
//        {
//            if (value == null)
//            {
//                return "";
//            }

//            if (value is System.Enum)
//            {
//                var name = System.Enum.GetName(value.GetType(), value);
//                if (name != null)
//                {
//                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
//                    if (field != null)
//                    {
//                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
//                            as System.Runtime.Serialization.EnumMemberAttribute;
//                        if (attribute != null)
//                        {
//                            return attribute.Value != null ? attribute.Value : name;
//                        }
//                    }

//                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
//                    return converted == null ? string.Empty : converted;
//                }
//            }
//            else if (value is bool)
//            {
//                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
//            }
//            else if (value is byte[])
//            {
//                return System.Convert.ToBase64String((byte[])value);
//            }
//            else if (value.GetType().IsArray)
//            {
//                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
//                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
//            }

//            var result = System.Convert.ToString(value, cultureInfo);
//            return result == null ? "" : result;
//        }
//    }

//    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class CheckoutClient
//    {
//        private System.Net.Http.HttpClient _httpClient;
//        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

//        public CheckoutClient(System.Net.Http.HttpClient httpClient)
//        {
//            _httpClient = httpClient;
//            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings);
//        }

//        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
//        {
//            var settings = new System.Text.Json.JsonSerializerOptions();
//            UpdateJsonSerializerSettings(settings);
//            return settings;
//        }

//        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

//        partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
//        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<CheckoutResponse> CheckoutAsync(CheckoutOptions body)
//        {
//            return CheckoutAsync(body, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<CheckoutResponse> CheckoutAsync(CheckoutOptions body, System.Threading.CancellationToken cancellationToken)
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/Checkout");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = System.Text.Json.JsonSerializer.Serialize(body, _settings.Value);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("POST");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<CheckoutResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 400)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<CheckoutResponse> ManageAsync(SessionCreate body)
//        {
//            return ManageAsync(body, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<CheckoutResponse> ManageAsync(SessionCreate body, System.Threading.CancellationToken cancellationToken)
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/Checkout/manage");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = System.Text.Json.JsonSerializer.Serialize(body, _settings.Value);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("POST");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<CheckoutResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 400)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        protected struct ObjectResponseResult<T>
//        {
//            public ObjectResponseResult(T responseObject, string responseText)
//            {
//                this.Object = responseObject;
//                this.Text = responseText;
//            }

//            public T Object { get; }

//            public string Text { get; }
//        }

//        public bool ReadResponseAsString { get; set; }

//        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
//        {
//            if (response == null || response.Content == null)
//            {
//                return new ObjectResponseResult<T>(default(T), string.Empty);
//            }

//            if (ReadResponseAsString)
//            {
//                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
//                try
//                {
//                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
//                    return new ObjectResponseResult<T>(typedBody, responseText);
//                }
//                catch (System.Text.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
//                }
//            }
//            else
//            {
//                try
//                {
//                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
//                    {
//                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
//                        return new ObjectResponseResult<T>(typedBody, string.Empty);
//                    }
//                }
//                catch (System.Text.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
//                }
//            }
//        }

//        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
//        {
//            if (value == null)
//            {
//                return "";
//            }

//            if (value is System.Enum)
//            {
//                var name = System.Enum.GetName(value.GetType(), value);
//                if (name != null)
//                {
//                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
//                    if (field != null)
//                    {
//                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
//                            as System.Runtime.Serialization.EnumMemberAttribute;
//                        if (attribute != null)
//                        {
//                            return attribute.Value != null ? attribute.Value : name;
//                        }
//                    }

//                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
//                    return converted == null ? string.Empty : converted;
//                }
//            }
//            else if (value is bool)
//            {
//                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
//            }
//            else if (value is byte[])
//            {
//                return System.Convert.ToBase64String((byte[])value);
//            }
//            else if (value.GetType().IsArray)
//            {
//                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
//                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
//            }

//            var result = System.Convert.ToString(value, cultureInfo);
//            return result == null ? "" : result;
//        }
//    }

//    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class EventClient
//    {
//        private System.Net.Http.HttpClient _httpClient;
//        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

//        public EventClient(System.Net.Http.HttpClient httpClient)
//        {
//            _httpClient = httpClient;
//            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings);
//        }

//        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
//        {
//            var settings = new System.Text.Json.JsonSerializerOptions();
//            UpdateJsonSerializerSettings(settings);
//            return settings;
//        }

//        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

//        partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
//        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

//        /// <summary>
//        /// Get all Requests
//        /// </summary>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task EventAsync(TokenValidationRequest body)
//        {
//            return EventAsync(body, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Get all Requests
//        /// </summary>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task EventAsync(TokenValidationRequest body, System.Threading.CancellationToken cancellationToken)
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/Event");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = System.Text.Json.JsonSerializer.Serialize(body, _settings.Value);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("POST");

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            return;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Create Event id
//        /// </summary>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task ResultAsync(ResultRequest body)
//        {
//            return ResultAsync(body, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Create Event id
//        /// </summary>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task ResultAsync(ResultRequest body, System.Threading.CancellationToken cancellationToken)
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/Event/result");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = System.Text.Json.JsonSerializer.Serialize(body, _settings.Value);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("POST");

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            return;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        protected struct ObjectResponseResult<T>
//        {
//            public ObjectResponseResult(T responseObject, string responseText)
//            {
//                this.Object = responseObject;
//                this.Text = responseText;
//            }

//            public T Object { get; }

//            public string Text { get; }
//        }

//        public bool ReadResponseAsString { get; set; }

//        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
//        {
//            if (response == null || response.Content == null)
//            {
//                return new ObjectResponseResult<T>(default(T), string.Empty);
//            }

//            if (ReadResponseAsString)
//            {
//                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
//                try
//                {
//                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
//                    return new ObjectResponseResult<T>(typedBody, responseText);
//                }
//                catch (System.Text.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
//                }
//            }
//            else
//            {
//                try
//                {
//                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
//                    {
//                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
//                        return new ObjectResponseResult<T>(typedBody, string.Empty);
//                    }
//                }
//                catch (System.Text.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
//                }
//            }
//        }

//        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
//        {
//            if (value == null)
//            {
//                return "";
//            }

//            if (value is System.Enum)
//            {
//                var name = System.Enum.GetName(value.GetType(), value);
//                if (name != null)
//                {
//                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
//                    if (field != null)
//                    {
//                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
//                            as System.Runtime.Serialization.EnumMemberAttribute;
//                        if (attribute != null)
//                        {
//                            return attribute.Value != null ? attribute.Value : name;
//                        }
//                    }

//                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
//                    return converted == null ? string.Empty : converted;
//                }
//            }
//            else if (value is bool)
//            {
//                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
//            }
//            else if (value is byte[])
//            {
//                return System.Convert.ToBase64String((byte[])value);
//            }
//            else if (value.GetType().IsArray)
//            {
//                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
//                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
//            }

//            var result = System.Convert.ToString(value, cultureInfo);
//            return result == null ? "" : result;
//        }
//    }

//    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ManageClient
//    {
//        private System.Net.Http.HttpClient _httpClient;
//        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

//        public ManageClient(System.Net.Http.HttpClient httpClient)
//        {
//            _httpClient = httpClient;
//            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings);
//        }

//        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
//        {
//            var settings = new System.Text.Json.JsonSerializerOptions();
//            UpdateJsonSerializerSettings(settings);
//            return settings;
//        }

//        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

//        partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
//        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<TwoFactorResponse> TwofaAsync(TwoFactorRequest body)
//        {
//            return TwofaAsync(body, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<TwoFactorResponse> TwofaAsync(TwoFactorRequest body, System.Threading.CancellationToken cancellationToken)
//        {
//            if (body == null)
//                throw new System.ArgumentNullException("body");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/manage/twofa");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = System.Text.Json.JsonSerializer.Serialize(body, _settings.Value);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("POST");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<TwoFactorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        if (status_ == 400)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 404)
//                        {
//                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("Not Found", status_, responseText_, headers_, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<InfoResponse> InfoGETAsync()
//        {
//            return InfoGETAsync(System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<InfoResponse> InfoGETAsync(System.Threading.CancellationToken cancellationToken)
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/manage/info");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<InfoResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        if (status_ == 400)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 404)
//                        {
//                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("Not Found", status_, responseText_, headers_, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<InfoResponse> InfoPOSTAsync(InfoRequest body)
//        {
//            return InfoPOSTAsync(body, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<InfoResponse> InfoPOSTAsync(InfoRequest body, System.Threading.CancellationToken cancellationToken)
//        {
//            if (body == null)
//                throw new System.ArgumentNullException("body");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/manage/info");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = System.Text.Json.JsonSerializer.Serialize(body, _settings.Value);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("POST");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<InfoResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        if (status_ == 400)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 404)
//                        {
//                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("Not Found", status_, responseText_, headers_, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        protected struct ObjectResponseResult<T>
//        {
//            public ObjectResponseResult(T responseObject, string responseText)
//            {
//                this.Object = responseObject;
//                this.Text = responseText;
//            }

//            public T Object { get; }

//            public string Text { get; }
//        }

//        public bool ReadResponseAsString { get; set; }

//        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
//        {
//            if (response == null || response.Content == null)
//            {
//                return new ObjectResponseResult<T>(default(T), string.Empty);
//            }

//            if (ReadResponseAsString)
//            {
//                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
//                try
//                {
//                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
//                    return new ObjectResponseResult<T>(typedBody, responseText);
//                }
//                catch (System.Text.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
//                }
//            }
//            else
//            {
//                try
//                {
//                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
//                    {
//                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
//                        return new ObjectResponseResult<T>(typedBody, string.Empty);
//                    }
//                }
//                catch (System.Text.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
//                }
//            }
//        }

//        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
//        {
//            if (value == null)
//            {
//                return "";
//            }

//            if (value is System.Enum)
//            {
//                var name = System.Enum.GetName(value.GetType(), value);
//                if (name != null)
//                {
//                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
//                    if (field != null)
//                    {
//                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
//                            as System.Runtime.Serialization.EnumMemberAttribute;
//                        if (attribute != null)
//                        {
//                            return attribute.Value != null ? attribute.Value : name;
//                        }
//                    }

//                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
//                    return converted == null ? string.Empty : converted;
//                }
//            }
//            else if (value is bool)
//            {
//                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
//            }
//            else if (value is byte[])
//            {
//                return System.Convert.ToBase64String((byte[])value);
//            }
//            else if (value.GetType().IsArray)
//            {
//                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
//                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
//            }

//            var result = System.Convert.ToString(value, cultureInfo);
//            return result == null ? "" : result;
//        }
//    }

//    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ModelAiClient
//    {
//        private System.Net.Http.HttpClient _httpClient;
//        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

//        public ModelAiClient(System.Net.Http.HttpClient httpClient)
//        {
//            _httpClient = httpClient;
//            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings);
//        }

//        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
//        {
//            var settings = new System.Text.Json.JsonSerializerOptions();
//            UpdateJsonSerializerSettings(settings);
//            return settings;
//        }

//        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

//        partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
//        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

//        /// <summary>
//        /// Get all Model Ai
//        /// </summary>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ModelAiResponse>> ModelAiAllAsync()
//        {
//            return ModelAiAllAsync(System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Get all Model Ai
//        /// </summary>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ModelAiResponse>> ModelAiAllAsync(System.Threading.CancellationToken cancellationToken)
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/ModelAi");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ModelAiResponse>>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Create a Model Ai
//        /// </summary>
//        /// <returns>Created</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ModelAiResponse> ModelAiPOSTAsync(ModelAiCreate body)
//        {
//            return ModelAiPOSTAsync(body, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Create a Model Ai
//        /// </summary>
//        /// <returns>Created</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ModelAiResponse> ModelAiPOSTAsync(ModelAiCreate body, System.Threading.CancellationToken cancellationToken)
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/ModelAi");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = System.Text.Json.JsonSerializer.Serialize(body, _settings.Value);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("POST");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 201)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ModelAiResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        if (status_ == 400)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Get one
//        /// </summary>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ModelAiResponse> ModelAiGETAsync(string id)
//        {
//            return ModelAiGETAsync(id, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Get one
//        /// </summary>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ModelAiResponse> ModelAiGETAsync(string id, System.Threading.CancellationToken cancellationToken)
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/ModelAi/{id}");
//            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ModelAiResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Update Model Ai
//        /// </summary>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ModelAiResponse> ModelAiPUTAsync(string id, ModelAiUpdate body)
//        {
//            return ModelAiPUTAsync(id, body, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Update Model Ai
//        /// </summary>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ModelAiResponse> ModelAiPUTAsync(string id, ModelAiUpdate body, System.Threading.CancellationToken cancellationToken)
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/ModelAi/{id}");
//            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = System.Text.Json.JsonSerializer.Serialize(body, _settings.Value);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("PUT");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ModelAiResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        if (status_ == 400)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 404)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Delete Model Ai
//        /// </summary>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<DeletedResponse> ModelAiDELETEAsync(string id)
//        {
//            return ModelAiDELETEAsync(id, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Delete Model Ai
//        /// </summary>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<DeletedResponse> ModelAiDELETEAsync(string id, System.Threading.CancellationToken cancellationToken)
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/ModelAi/{id}");
//            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<DeletedResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        if (status_ == 400)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 404)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        protected struct ObjectResponseResult<T>
//        {
//            public ObjectResponseResult(T responseObject, string responseText)
//            {
//                this.Object = responseObject;
//                this.Text = responseText;
//            }

//            public T Object { get; }

//            public string Text { get; }
//        }

//        public bool ReadResponseAsString { get; set; }

//        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
//        {
//            if (response == null || response.Content == null)
//            {
//                return new ObjectResponseResult<T>(default(T), string.Empty);
//            }

//            if (ReadResponseAsString)
//            {
//                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
//                try
//                {
//                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
//                    return new ObjectResponseResult<T>(typedBody, responseText);
//                }
//                catch (System.Text.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
//                }
//            }
//            else
//            {
//                try
//                {
//                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
//                    {
//                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
//                        return new ObjectResponseResult<T>(typedBody, string.Empty);
//                    }
//                }
//                catch (System.Text.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
//                }
//            }
//        }

//        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
//        {
//            if (value == null)
//            {
//                return "";
//            }

//            if (value is System.Enum)
//            {
//                var name = System.Enum.GetName(value.GetType(), value);
//                if (name != null)
//                {
//                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
//                    if (field != null)
//                    {
//                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
//                            as System.Runtime.Serialization.EnumMemberAttribute;
//                        if (attribute != null)
//                        {
//                            return attribute.Value != null ? attribute.Value : name;
//                        }
//                    }

//                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
//                    return converted == null ? string.Empty : converted;
//                }
//            }
//            else if (value is bool)
//            {
//                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
//            }
//            else if (value is byte[])
//            {
//                return System.Convert.ToBase64String((byte[])value);
//            }
//            else if (value.GetType().IsArray)
//            {
//                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
//                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
//            }

//            var result = System.Convert.ToString(value, cultureInfo);
//            return result == null ? "" : result;
//        }
//    }

//    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ModelGatewayClient
//    {
//        private System.Net.Http.HttpClient _httpClient;
//        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

//        public ModelGatewayClient(System.Net.Http.HttpClient httpClient)
//        {
//            _httpClient = httpClient;
//            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings);
//        }

//        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
//        {
//            var settings = new System.Text.Json.JsonSerializerOptions();
//            UpdateJsonSerializerSettings(settings);
//            return settings;
//        }

//        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

//        partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
//        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

//        /// <summary>
//        /// Get all Model Gateway
//        /// </summary>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ModelGatewayResponse>> ModelGatewayAllAsync()
//        {
//            return ModelGatewayAllAsync(System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Get all Model Gateway
//        /// </summary>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ModelGatewayResponse>> ModelGatewayAllAsync(System.Threading.CancellationToken cancellationToken)
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/ModelGateway");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ModelGatewayResponse>>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Create a Model Gateway
//        /// </summary>
//        /// <returns>Created</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ModelGatewayResponse> ModelGatewayPOSTAsync(ModelGatewayCreate body)
//        {
//            return ModelGatewayPOSTAsync(body, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Create a Model Gateway
//        /// </summary>
//        /// <returns>Created</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ModelGatewayResponse> ModelGatewayPOSTAsync(ModelGatewayCreate body, System.Threading.CancellationToken cancellationToken)
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/ModelGateway");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = System.Text.Json.JsonSerializer.Serialize(body, _settings.Value);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("POST");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 201)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ModelGatewayResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        if (status_ == 400)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Get one
//        /// </summary>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ModelGatewayResponse> ModelGatewayGETAsync(string id)
//        {
//            return ModelGatewayGETAsync(id, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Get one
//        /// </summary>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ModelGatewayResponse> ModelGatewayGETAsync(string id, System.Threading.CancellationToken cancellationToken)
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/ModelGateway/{id}");
//            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ModelGatewayResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Update Model Gateway
//        /// </summary>
//        /// <returns>Created</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ModelGatewayResponse> ModelGatewayPUTAsync(string id, ModelGatewayUpdate body)
//        {
//            return ModelGatewayPUTAsync(id, body, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Update Model Gateway
//        /// </summary>
//        /// <returns>Created</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ModelGatewayResponse> ModelGatewayPUTAsync(string id, ModelGatewayUpdate body, System.Threading.CancellationToken cancellationToken)
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/ModelGateway/{id}");
//            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = System.Text.Json.JsonSerializer.Serialize(body, _settings.Value);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("PUT");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 201)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ModelGatewayResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        if (status_ == 400)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 404)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Delete Model Gateway
//        /// </summary>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<DeletedResponse> ModelGatewayDELETEAsync(string id)
//        {
//            return ModelGatewayDELETEAsync(id, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Delete Model Gateway
//        /// </summary>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<DeletedResponse> ModelGatewayDELETEAsync(string id, System.Threading.CancellationToken cancellationToken)
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/ModelGateway/{id}");
//            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<DeletedResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task DefaultAsync(string id)
//        {
//            return DefaultAsync(id, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task DefaultAsync(string id, System.Threading.CancellationToken cancellationToken)
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/ModelGateway/default/{id}");
//            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
//                    request_.Method = new System.Net.Http.HttpMethod("PUT");

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            return;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        protected struct ObjectResponseResult<T>
//        {
//            public ObjectResponseResult(T responseObject, string responseText)
//            {
//                this.Object = responseObject;
//                this.Text = responseText;
//            }

//            public T Object { get; }

//            public string Text { get; }
//        }

//        public bool ReadResponseAsString { get; set; }

//        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
//        {
//            if (response == null || response.Content == null)
//            {
//                return new ObjectResponseResult<T>(default(T), string.Empty);
//            }

//            if (ReadResponseAsString)
//            {
//                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
//                try
//                {
//                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
//                    return new ObjectResponseResult<T>(typedBody, responseText);
//                }
//                catch (System.Text.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
//                }
//            }
//            else
//            {
//                try
//                {
//                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
//                    {
//                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
//                        return new ObjectResponseResult<T>(typedBody, string.Empty);
//                    }
//                }
//                catch (System.Text.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
//                }
//            }
//        }

//        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
//        {
//            if (value == null)
//            {
//                return "";
//            }

//            if (value is System.Enum)
//            {
//                var name = System.Enum.GetName(value.GetType(), value);
//                if (name != null)
//                {
//                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
//                    if (field != null)
//                    {
//                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
//                            as System.Runtime.Serialization.EnumMemberAttribute;
//                        if (attribute != null)
//                        {
//                            return attribute.Value != null ? attribute.Value : name;
//                        }
//                    }

//                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
//                    return converted == null ? string.Empty : converted;
//                }
//            }
//            else if (value is bool)
//            {
//                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
//            }
//            else if (value is byte[])
//            {
//                return System.Convert.ToBase64String((byte[])value);
//            }
//            else if (value.GetType().IsArray)
//            {
//                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
//                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
//            }

//            var result = System.Convert.ToString(value, cultureInfo);
//            return result == null ? "" : result;
//        }
//    }

//    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class PermissionClient
//    {
//        private System.Net.Http.HttpClient _httpClient;
//        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

//        public PermissionClient(System.Net.Http.HttpClient httpClient)
//        {
//            _httpClient = httpClient;
//            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings);
//        }

//        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
//        {
//            var settings = new System.Text.Json.JsonSerializerOptions();
//            UpdateJsonSerializerSettings(settings);
//            return settings;
//        }

//        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

//        partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
//        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task GetAllAsync()
//        {
//            return GetAllAsync(System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task GetAllAsync(System.Threading.CancellationToken cancellationToken)
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/Permission/GetAll");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            return;
//                        }
//                        else
//                        if (status_ == 400)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        protected struct ObjectResponseResult<T>
//        {
//            public ObjectResponseResult(T responseObject, string responseText)
//            {
//                this.Object = responseObject;
//                this.Text = responseText;
//            }

//            public T Object { get; }

//            public string Text { get; }
//        }

//        public bool ReadResponseAsString { get; set; }

//        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
//        {
//            if (response == null || response.Content == null)
//            {
//                return new ObjectResponseResult<T>(default(T), string.Empty);
//            }

//            if (ReadResponseAsString)
//            {
//                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
//                try
//                {
//                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
//                    return new ObjectResponseResult<T>(typedBody, responseText);
//                }
//                catch (System.Text.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
//                }
//            }
//            else
//            {
//                try
//                {
//                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
//                    {
//                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
//                        return new ObjectResponseResult<T>(typedBody, string.Empty);
//                    }
//                }
//                catch (System.Text.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
//                }
//            }
//        }

//        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
//        {
//            if (value == null)
//            {
//                return "";
//            }

//            if (value is System.Enum)
//            {
//                var name = System.Enum.GetName(value.GetType(), value);
//                if (name != null)
//                {
//                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
//                    if (field != null)
//                    {
//                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
//                            as System.Runtime.Serialization.EnumMemberAttribute;
//                        if (attribute != null)
//                        {
//                            return attribute.Value != null ? attribute.Value : name;
//                        }
//                    }

//                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
//                    return converted == null ? string.Empty : converted;
//                }
//            }
//            else if (value is bool)
//            {
//                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
//            }
//            else if (value is byte[])
//            {
//                return System.Convert.ToBase64String((byte[])value);
//            }
//            else if (value.GetType().IsArray)
//            {
//                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
//                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
//            }

//            var result = System.Convert.ToString(value, cultureInfo);
//            return result == null ? "" : result;
//        }
//    }

//    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class PlansClient
//    {
//        private System.Net.Http.HttpClient _httpClient;
//        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

//        public PlansClient(System.Net.Http.HttpClient httpClient)
//        {
//            _httpClient = httpClient;
//            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings);
//        }

//        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
//        {
//            var settings = new System.Text.Json.JsonSerializerOptions();
//            UpdateJsonSerializerSettings(settings);
//            return settings;
//        }

//        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

//        partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
//        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

//        /// <summary>
//        /// Get all plans
//        /// </summary>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PlanResponse>> PlansAllAsync()
//        {
//            return PlansAllAsync(System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Get all plans
//        /// </summary>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PlanResponse>> PlansAllAsync(System.Threading.CancellationToken cancellationToken)
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/Plans");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<PlanResponse>>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Create a plan
//        /// </summary>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<PlanResponse> PlansPOSTAsync(PlanCreate body)
//        {
//            return PlansPOSTAsync(body, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Create a plan
//        /// </summary>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<PlanResponse> PlansPOSTAsync(PlanCreate body, System.Threading.CancellationToken cancellationToken)
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/Plans");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = System.Text.Json.JsonSerializer.Serialize(body, _settings.Value);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("POST");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<PlanResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<PlanGrouping> GroupAsync()
//        {
//            return GroupAsync(System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<PlanGrouping> GroupAsync(System.Threading.CancellationToken cancellationToken)
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/Plans/group");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<PlanGrouping>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Get one
//        /// </summary>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<PlanResponse> PlansGETAsync(string id)
//        {
//            return PlansGETAsync(id, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Get one
//        /// </summary>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<PlanResponse> PlansGETAsync(string id, System.Threading.CancellationToken cancellationToken)
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/Plans/{id}");
//            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<PlanResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Update plan
//        /// </summary>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<PlanResponse> PlansPUTAsync(string id, PlanUpdate body)
//        {
//            return PlansPUTAsync(id, body, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Update plan
//        /// </summary>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<PlanResponse> PlansPUTAsync(string id, PlanUpdate body, System.Threading.CancellationToken cancellationToken)
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/Plans/{id}");
//            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = System.Text.Json.JsonSerializer.Serialize(body, _settings.Value);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("PUT");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<PlanResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Delete plan
//        /// </summary>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<DeletedResponse> PlansDELETEAsync(string id)
//        {
//            return PlansDELETEAsync(id, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Delete plan
//        /// </summary>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<DeletedResponse> PlansDELETEAsync(string id, System.Threading.CancellationToken cancellationToken)
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/Plans/{id}");
//            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<DeletedResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        protected struct ObjectResponseResult<T>
//        {
//            public ObjectResponseResult(T responseObject, string responseText)
//            {
//                this.Object = responseObject;
//                this.Text = responseText;
//            }

//            public T Object { get; }

//            public string Text { get; }
//        }

//        public bool ReadResponseAsString { get; set; }

//        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
//        {
//            if (response == null || response.Content == null)
//            {
//                return new ObjectResponseResult<T>(default(T), string.Empty);
//            }

//            if (ReadResponseAsString)
//            {
//                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
//                try
//                {
//                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
//                    return new ObjectResponseResult<T>(typedBody, responseText);
//                }
//                catch (System.Text.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
//                }
//            }
//            else
//            {
//                try
//                {
//                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
//                    {
//                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
//                        return new ObjectResponseResult<T>(typedBody, string.Empty);
//                    }
//                }
//                catch (System.Text.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
//                }
//            }
//        }

//        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
//        {
//            if (value == null)
//            {
//                return "";
//            }

//            if (value is System.Enum)
//            {
//                var name = System.Enum.GetName(value.GetType(), value);
//                if (name != null)
//                {
//                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
//                    if (field != null)
//                    {
//                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
//                            as System.Runtime.Serialization.EnumMemberAttribute;
//                        if (attribute != null)
//                        {
//                            return attribute.Value != null ? attribute.Value : name;
//                        }
//                    }

//                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
//                    return converted == null ? string.Empty : converted;
//                }
//            }
//            else if (value is bool)
//            {
//                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
//            }
//            else if (value is byte[])
//            {
//                return System.Convert.ToBase64String((byte[])value);
//            }
//            else if (value.GetType().IsArray)
//            {
//                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
//                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
//            }

//            var result = System.Convert.ToString(value, cultureInfo);
//            return result == null ? "" : result;
//        }
//    }

//    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class PriceClient
//    {
//        private System.Net.Http.HttpClient _httpClient;
//        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

//        public PriceClient(System.Net.Http.HttpClient httpClient)
//        {
//            _httpClient = httpClient;
//            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings);
//        }

//        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
//        {
//            var settings = new System.Text.Json.JsonSerializerOptions();
//            UpdateJsonSerializerSettings(settings);
//            return settings;
//        }

//        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

//        partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
//        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PriceResponse>> GetAllAsync(string productId, bool? active)
//        {
//            return GetAllAsync(productId, active, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PriceResponse>> GetAllAsync(string productId, bool? active, System.Threading.CancellationToken cancellationToken)
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/Price/get-all?");
//            if (productId != null)
//            {
//                urlBuilder_.Append(System.Uri.EscapeDataString("productId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(productId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//            }
//            if (active != null)
//            {
//                urlBuilder_.Append(System.Uri.EscapeDataString("active") + "=").Append(System.Uri.EscapeDataString(ConvertToString(active, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//            }
//            urlBuilder_.Length--;

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<PriceResponse>>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 400)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<PriceResponse> GetAsync(string id)
//        {
//            return GetAsync(id, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<PriceResponse> GetAsync(string id, System.Threading.CancellationToken cancellationToken)
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/Price/get/{id}");
//            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<PriceResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 400)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<PriceResponse> CreateAsync(PriceCreate body)
//        {
//            return CreateAsync(body, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<PriceResponse> CreateAsync(PriceCreate body, System.Threading.CancellationToken cancellationToken)
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/Price/create");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = System.Text.Json.JsonSerializer.Serialize(body, _settings.Value);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("POST");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<PriceResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 400)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<PriceResponse> UpdateAsync(string id, PriceUpdate body)
//        {
//            return UpdateAsync(id, body, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<PriceResponse> UpdateAsync(string id, PriceUpdate body, System.Threading.CancellationToken cancellationToken)
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/Price/update/{id}");
//            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = System.Text.Json.JsonSerializer.Serialize(body, _settings.Value);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("PUT");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<PriceResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 400)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task SearchAsync(PriceSearchOptions body)
//        {
//            return SearchAsync(body, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task SearchAsync(PriceSearchOptions body, System.Threading.CancellationToken cancellationToken)
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/Price/search");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = System.Text.Json.JsonSerializer.Serialize(body, _settings.Value);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("GET");

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            return;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        protected struct ObjectResponseResult<T>
//        {
//            public ObjectResponseResult(T responseObject, string responseText)
//            {
//                this.Object = responseObject;
//                this.Text = responseText;
//            }

//            public T Object { get; }

//            public string Text { get; }
//        }

//        public bool ReadResponseAsString { get; set; }

//        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
//        {
//            if (response == null || response.Content == null)
//            {
//                return new ObjectResponseResult<T>(default(T), string.Empty);
//            }

//            if (ReadResponseAsString)
//            {
//                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
//                try
//                {
//                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
//                    return new ObjectResponseResult<T>(typedBody, responseText);
//                }
//                catch (System.Text.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
//                }
//            }
//            else
//            {
//                try
//                {
//                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
//                    {
//                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
//                        return new ObjectResponseResult<T>(typedBody, string.Empty);
//                    }
//                }
//                catch (System.Text.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
//                }
//            }
//        }

//        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
//        {
//            if (value == null)
//            {
//                return "";
//            }

//            if (value is System.Enum)
//            {
//                var name = System.Enum.GetName(value.GetType(), value);
//                if (name != null)
//                {
//                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
//                    if (field != null)
//                    {
//                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
//                            as System.Runtime.Serialization.EnumMemberAttribute;
//                        if (attribute != null)
//                        {
//                            return attribute.Value != null ? attribute.Value : name;
//                        }
//                    }

//                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
//                    return converted == null ? string.Empty : converted;
//                }
//            }
//            else if (value is bool)
//            {
//                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
//            }
//            else if (value is byte[])
//            {
//                return System.Convert.ToBase64String((byte[])value);
//            }
//            else if (value.GetType().IsArray)
//            {
//                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
//                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
//            }

//            var result = System.Convert.ToString(value, cultureInfo);
//            return result == null ? "" : result;
//        }
//    }

//    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ProductClient
//    {
//        private System.Net.Http.HttpClient _httpClient;
//        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

//        public ProductClient(System.Net.Http.HttpClient httpClient)
//        {
//            _httpClient = httpClient;
//            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings);
//        }

//        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
//        {
//            var settings = new System.Text.Json.JsonSerializerOptions();
//            UpdateJsonSerializerSettings(settings);
//            return settings;
//        }

//        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

//        partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
//        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProductResponse>> ProductsAllAsync(string startingAfter, string endingBefore, long? limit)
//        {
//            return ProductsAllAsync(startingAfter, endingBefore, limit, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProductResponse>> ProductsAllAsync(string startingAfter, string endingBefore, long? limit, System.Threading.CancellationToken cancellationToken)
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/products?");
//            if (startingAfter != null)
//            {
//                urlBuilder_.Append(System.Uri.EscapeDataString("startingAfter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startingAfter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//            }
//            if (endingBefore != null)
//            {
//                urlBuilder_.Append(System.Uri.EscapeDataString("endingBefore") + "=").Append(System.Uri.EscapeDataString(ConvertToString(endingBefore, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//            }
//            if (limit != null)
//            {
//                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//            }
//            urlBuilder_.Length--;

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ProductResponse>>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 400)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ProductResponse> ProductsPOSTAsync(ProductCreate body)
//        {
//            return ProductsPOSTAsync(body, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ProductResponse> ProductsPOSTAsync(ProductCreate body, System.Threading.CancellationToken cancellationToken)
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/products");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = System.Text.Json.JsonSerializer.Serialize(body, _settings.Value);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("POST");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProductResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        if (status_ == 400)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ProductResponse> ProductsGETAsync(string id)
//        {
//            return ProductsGETAsync(id, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ProductResponse> ProductsGETAsync(string id, System.Threading.CancellationToken cancellationToken)
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/products/{id}");
//            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProductResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ProductResponse> ProductsPUTAsync(string id, ProductUpdate body)
//        {
//            return ProductsPUTAsync(id, body, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ProductResponse> ProductsPUTAsync(string id, ProductUpdate body, System.Threading.CancellationToken cancellationToken)
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/products/{id}");
//            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = System.Text.Json.JsonSerializer.Serialize(body, _settings.Value);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("PUT");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProductResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<DeletedResponse> ProductsDELETEAsync(string id)
//        {
//            return ProductsDELETEAsync(id, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<DeletedResponse> ProductsDELETEAsync(string id, System.Threading.CancellationToken cancellationToken)
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/products/{id}");
//            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<DeletedResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        if (status_ == 400)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProductResponse>> SearchAllAsync(string query, int? limit, string page)
//        {
//            return SearchAllAsync(query, limit, page, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProductResponse>> SearchAllAsync(string query, int? limit, string page, System.Threading.CancellationToken cancellationToken)
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/products/search?");
//            if (query != null)
//            {
//                urlBuilder_.Append(System.Uri.EscapeDataString("query") + "=").Append(System.Uri.EscapeDataString(ConvertToString(query, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//            }
//            if (limit != null)
//            {
//                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//            }
//            if (page != null)
//            {
//                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
//            }
//            urlBuilder_.Length--;

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ProductResponse>>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        protected struct ObjectResponseResult<T>
//        {
//            public ObjectResponseResult(T responseObject, string responseText)
//            {
//                this.Object = responseObject;
//                this.Text = responseText;
//            }

//            public T Object { get; }

//            public string Text { get; }
//        }

//        public bool ReadResponseAsString { get; set; }

//        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
//        {
//            if (response == null || response.Content == null)
//            {
//                return new ObjectResponseResult<T>(default(T), string.Empty);
//            }

//            if (ReadResponseAsString)
//            {
//                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
//                try
//                {
//                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
//                    return new ObjectResponseResult<T>(typedBody, responseText);
//                }
//                catch (System.Text.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
//                }
//            }
//            else
//            {
//                try
//                {
//                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
//                    {
//                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
//                        return new ObjectResponseResult<T>(typedBody, string.Empty);
//                    }
//                }
//                catch (System.Text.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
//                }
//            }
//        }

//        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
//        {
//            if (value == null)
//            {
//                return "";
//            }

//            if (value is System.Enum)
//            {
//                var name = System.Enum.GetName(value.GetType(), value);
//                if (name != null)
//                {
//                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
//                    if (field != null)
//                    {
//                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
//                            as System.Runtime.Serialization.EnumMemberAttribute;
//                        if (attribute != null)
//                        {
//                            return attribute.Value != null ? attribute.Value : name;
//                        }
//                    }

//                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
//                    return converted == null ? string.Empty : converted;
//                }
//            }
//            else if (value is bool)
//            {
//                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
//            }
//            else if (value is byte[])
//            {
//                return System.Convert.ToBase64String((byte[])value);
//            }
//            else if (value.GetType().IsArray)
//            {
//                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
//                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
//            }

//            var result = System.Convert.ToString(value, cultureInfo);
//            return result == null ? "" : result;
//        }
//    }

//    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class RequestClient
//    {
//        private System.Net.Http.HttpClient _httpClient;
//        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

//        public RequestClient(System.Net.Http.HttpClient httpClient)
//        {
//            _httpClient = httpClient;
//            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings);
//        }

//        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
//        {
//            var settings = new System.Text.Json.JsonSerializerOptions();
//            UpdateJsonSerializerSettings(settings);
//            return settings;
//        }

//        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

//        partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
//        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

//        /// <summary>
//        /// Get all Requests
//        /// </summary>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RequestResponse>> RequestAllAsync()
//        {
//            return RequestAllAsync(System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Get all Requests
//        /// </summary>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RequestResponse>> RequestAllAsync(System.Threading.CancellationToken cancellationToken)
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/Request");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RequestResponse>>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Create a request
//        /// </summary>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task RequestPOSTAsync(RequestCreate body)
//        {
//            return RequestPOSTAsync(body, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Create a request
//        /// </summary>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task RequestPOSTAsync(RequestCreate body, System.Threading.CancellationToken cancellationToken)
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/Request");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = System.Text.Json.JsonSerializer.Serialize(body, _settings.Value);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("POST");

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            return;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Get one
//        /// </summary>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<RequestResponse> RequestGETAsync(string id)
//        {
//            return RequestGETAsync(id, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Get one
//        /// </summary>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<RequestResponse> RequestGETAsync(string id, System.Threading.CancellationToken cancellationToken)
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/Request/{id}");
//            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<RequestResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Delete request
//        /// </summary>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<DeletedResponse> RequestDELETEAsync(string id)
//        {
//            return RequestDELETEAsync(id, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Delete request
//        /// </summary>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<DeletedResponse> RequestDELETEAsync(string id, System.Threading.CancellationToken cancellationToken)
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/Request/{id}");
//            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<DeletedResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Check if requests allowed
//        /// </summary>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<RequestAllowed> AllowedAsync(string serviceId)
//        {
//            return AllowedAsync(serviceId, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Check if requests allowed
//        /// </summary>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<RequestAllowed> AllowedAsync(string serviceId, System.Threading.CancellationToken cancellationToken)
//        {
//            if (serviceId == null)
//                throw new System.ArgumentNullException("serviceId");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/Request/allowed/{serviceId}");
//            urlBuilder_.Replace("{serviceId}", System.Uri.EscapeDataString(ConvertToString(serviceId, System.Globalization.CultureInfo.InvariantCulture)));

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<RequestAllowed>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        protected struct ObjectResponseResult<T>
//        {
//            public ObjectResponseResult(T responseObject, string responseText)
//            {
//                this.Object = responseObject;
//                this.Text = responseText;
//            }

//            public T Object { get; }

//            public string Text { get; }
//        }

//        public bool ReadResponseAsString { get; set; }

//        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
//        {
//            if (response == null || response.Content == null)
//            {
//                return new ObjectResponseResult<T>(default(T), string.Empty);
//            }

//            if (ReadResponseAsString)
//            {
//                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
//                try
//                {
//                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
//                    return new ObjectResponseResult<T>(typedBody, responseText);
//                }
//                catch (System.Text.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
//                }
//            }
//            else
//            {
//                try
//                {
//                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
//                    {
//                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
//                        return new ObjectResponseResult<T>(typedBody, string.Empty);
//                    }
//                }
//                catch (System.Text.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
//                }
//            }
//        }

//        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
//        {
//            if (value == null)
//            {
//                return "";
//            }

//            if (value is System.Enum)
//            {
//                var name = System.Enum.GetName(value.GetType(), value);
//                if (name != null)
//                {
//                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
//                    if (field != null)
//                    {
//                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
//                            as System.Runtime.Serialization.EnumMemberAttribute;
//                        if (attribute != null)
//                        {
//                            return attribute.Value != null ? attribute.Value : name;
//                        }
//                    }

//                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
//                    return converted == null ? string.Empty : converted;
//                }
//            }
//            else if (value is bool)
//            {
//                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
//            }
//            else if (value is byte[])
//            {
//                return System.Convert.ToBase64String((byte[])value);
//            }
//            else if (value.GetType().IsArray)
//            {
//                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
//                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
//            }

//            var result = System.Convert.ToString(value, cultureInfo);
//            return result == null ? "" : result;
//        }
//    }

//    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class RolesClient
//    {
//        private System.Net.Http.HttpClient _httpClient;
//        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

//        public RolesClient(System.Net.Http.HttpClient httpClient)
//        {
//            _httpClient = httpClient;
//            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings);
//        }

//        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
//        {
//            var settings = new System.Text.Json.JsonSerializerOptions();
//            UpdateJsonSerializerSettings(settings);
//            return settings;
//        }

//        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

//        partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
//        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<object>> RolesAllAsync()
//        {
//            return RolesAllAsync(System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<object>> RolesAllAsync(System.Threading.CancellationToken cancellationToken)
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/Roles");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<object>>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        if (status_ == 400)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task RolesPOSTAsync(RoleCreate body)
//        {
//            return RolesPOSTAsync(body, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task RolesPOSTAsync(RoleCreate body, System.Threading.CancellationToken cancellationToken)
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/Roles");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = System.Text.Json.JsonSerializer.Serialize(body, _settings.Value);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("POST");

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            return;
//                        }
//                        else
//                        if (status_ == 201)
//                        {
//                            return;
//                        }
//                        else
//                        if (status_ == 400)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<RoleResponse> RolesGETAsync(string id)
//        {
//            return RolesGETAsync(id, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<RoleResponse> RolesGETAsync(string id, System.Threading.CancellationToken cancellationToken)
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/Roles/{id}");
//            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<RoleResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        if (status_ == 400)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task RolesDELETEAsync(string id)
//        {
//            return RolesDELETEAsync(id, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task RolesDELETEAsync(string id, System.Threading.CancellationToken cancellationToken)
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/Roles/{id}");
//            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            return;
//                        }
//                        else
//                        if (status_ == 400)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task AssignPermissionAsync(RolePermitionAssign body)
//        {
//            return AssignPermissionAsync(body, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task AssignPermissionAsync(RolePermitionAssign body, System.Threading.CancellationToken cancellationToken)
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/Roles/assignPermission");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = System.Text.Json.JsonSerializer.Serialize(body, _settings.Value);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("POST");

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            return;
//                        }
//                        else
//                        if (status_ == 400)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        protected struct ObjectResponseResult<T>
//        {
//            public ObjectResponseResult(T responseObject, string responseText)
//            {
//                this.Object = responseObject;
//                this.Text = responseText;
//            }

//            public T Object { get; }

//            public string Text { get; }
//        }

//        public bool ReadResponseAsString { get; set; }

//        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
//        {
//            if (response == null || response.Content == null)
//            {
//                return new ObjectResponseResult<T>(default(T), string.Empty);
//            }

//            if (ReadResponseAsString)
//            {
//                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
//                try
//                {
//                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
//                    return new ObjectResponseResult<T>(typedBody, responseText);
//                }
//                catch (System.Text.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
//                }
//            }
//            else
//            {
//                try
//                {
//                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
//                    {
//                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
//                        return new ObjectResponseResult<T>(typedBody, string.Empty);
//                    }
//                }
//                catch (System.Text.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
//                }
//            }
//        }

//        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
//        {
//            if (value == null)
//            {
//                return "";
//            }

//            if (value is System.Enum)
//            {
//                var name = System.Enum.GetName(value.GetType(), value);
//                if (name != null)
//                {
//                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
//                    if (field != null)
//                    {
//                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
//                            as System.Runtime.Serialization.EnumMemberAttribute;
//                        if (attribute != null)
//                        {
//                            return attribute.Value != null ? attribute.Value : name;
//                        }
//                    }

//                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
//                    return converted == null ? string.Empty : converted;
//                }
//            }
//            else if (value is bool)
//            {
//                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
//            }
//            else if (value is byte[])
//            {
//                return System.Convert.ToBase64String((byte[])value);
//            }
//            else if (value.GetType().IsArray)
//            {
//                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
//                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
//            }

//            var result = System.Convert.ToString(value, cultureInfo);
//            return result == null ? "" : result;
//        }
//    }

//    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ServiceClient
//    {
//        private System.Net.Http.HttpClient _httpClient;
//        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

//        public ServiceClient(System.Net.Http.HttpClient httpClient)
//        {
//            _httpClient = httpClient;
//            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings);
//        }

//        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
//        {
//            var settings = new System.Text.Json.JsonSerializerOptions();
//            UpdateJsonSerializerSettings(settings);
//            return settings;
//        }

//        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

//        partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
//        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

//        /// <summary>
//        /// Get all Services
//        /// </summary>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ServiceResponse>> ServiceAllAsync()
//        {
//            return ServiceAllAsync(System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Get all Services
//        /// </summary>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ServiceResponse>> ServiceAllAsync(System.Threading.CancellationToken cancellationToken)
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/Service");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ServiceResponse>>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Create a service
//        /// </summary>
//        /// <returns>Created</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ServiceResponse> ServicePOSTAsync(ServiceCreate body)
//        {
//            return ServicePOSTAsync(body, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Create a service
//        /// </summary>
//        /// <returns>Created</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ServiceResponse> ServicePOSTAsync(ServiceCreate body, System.Threading.CancellationToken cancellationToken)
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/Service");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = System.Text.Json.JsonSerializer.Serialize(body, _settings.Value);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("POST");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 201)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ServiceResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 404)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Get one
//        /// </summary>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ServiceResponse> ServiceGETAsync(string id)
//        {
//            return ServiceGETAsync(id, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Get one
//        /// </summary>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ServiceResponse> ServiceGETAsync(string id, System.Threading.CancellationToken cancellationToken)
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/Service/{id}");
//            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ServiceResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Update service
//        /// </summary>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task ServicePUTAsync(string id, ServiceUpdate body)
//        {
//            return ServicePUTAsync(id, body, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Update service
//        /// </summary>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task ServicePUTAsync(string id, ServiceUpdate body, System.Threading.CancellationToken cancellationToken)
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/Service/{id}");
//            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = System.Text.Json.JsonSerializer.Serialize(body, _settings.Value);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("PUT");

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 200)
//                        {
//                            return;
//                        }
//                        else
//                        if (status_ == 404)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Delete service
//        /// </summary>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<DeletedResponse> ServiceDELETEAsync(string id)
//        {
//            return ServiceDELETEAsync(id, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Delete service
//        /// </summary>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<DeletedResponse> ServiceDELETEAsync(string id, System.Threading.CancellationToken cancellationToken)
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/Service/{id}");
//            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<DeletedResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        if (status_ == 400)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        protected struct ObjectResponseResult<T>
//        {
//            public ObjectResponseResult(T responseObject, string responseText)
//            {
//                this.Object = responseObject;
//                this.Text = responseText;
//            }

//            public T Object { get; }

//            public string Text { get; }
//        }

//        public bool ReadResponseAsString { get; set; }

//        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
//        {
//            if (response == null || response.Content == null)
//            {
//                return new ObjectResponseResult<T>(default(T), string.Empty);
//            }

//            if (ReadResponseAsString)
//            {
//                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
//                try
//                {
//                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
//                    return new ObjectResponseResult<T>(typedBody, responseText);
//                }
//                catch (System.Text.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
//                }
//            }
//            else
//            {
//                try
//                {
//                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
//                    {
//                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
//                        return new ObjectResponseResult<T>(typedBody, string.Empty);
//                    }
//                }
//                catch (System.Text.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
//                }
//            }
//        }

//        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
//        {
//            if (value == null)
//            {
//                return "";
//            }

//            if (value is System.Enum)
//            {
//                var name = System.Enum.GetName(value.GetType(), value);
//                if (name != null)
//                {
//                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
//                    if (field != null)
//                    {
//                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
//                            as System.Runtime.Serialization.EnumMemberAttribute;
//                        if (attribute != null)
//                        {
//                            return attribute.Value != null ? attribute.Value : name;
//                        }
//                    }

//                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
//                    return converted == null ? string.Empty : converted;
//                }
//            }
//            else if (value is bool)
//            {
//                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
//            }
//            else if (value is byte[])
//            {
//                return System.Convert.ToBase64String((byte[])value);
//            }
//            else if (value.GetType().IsArray)
//            {
//                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
//                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
//            }

//            var result = System.Convert.ToString(value, cultureInfo);
//            return result == null ? "" : result;
//        }
//    }

//    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ServiceMethodClient
//    {
//        private System.Net.Http.HttpClient _httpClient;
//        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

//        public ServiceMethodClient(System.Net.Http.HttpClient httpClient)
//        {
//            _httpClient = httpClient;
//            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings);
//        }

//        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
//        {
//            var settings = new System.Text.Json.JsonSerializerOptions();
//            UpdateJsonSerializerSettings(settings);
//            return settings;
//        }

//        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

//        partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
//        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

//        /// <summary>
//        /// Get all Service Method
//        /// </summary>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ServiceMethodResponse>> ServiceMethodAllAsync()
//        {
//            return ServiceMethodAllAsync(System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Get all Service Method
//        /// </summary>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ServiceMethodResponse>> ServiceMethodAllAsync(System.Threading.CancellationToken cancellationToken)
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/ServiceMethod");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ServiceMethodResponse>>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Create a Service Method
//        /// </summary>
//        /// <returns>Created</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ServiceMethodResponse> ServiceMethodPOSTAsync(ServiceMethodCreate body)
//        {
//            return ServiceMethodPOSTAsync(body, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Create a Service Method
//        /// </summary>
//        /// <returns>Created</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ServiceMethodResponse> ServiceMethodPOSTAsync(ServiceMethodCreate body, System.Threading.CancellationToken cancellationToken)
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/ServiceMethod");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = System.Text.Json.JsonSerializer.Serialize(body, _settings.Value);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("POST");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 201)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ServiceMethodResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        if (status_ == 400)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Get one
//        /// </summary>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ServiceMethodResponse> ServiceMethodGETAsync(string id)
//        {
//            return ServiceMethodGETAsync(id, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Get one
//        /// </summary>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ServiceMethodResponse> ServiceMethodGETAsync(string id, System.Threading.CancellationToken cancellationToken)
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/ServiceMethod/{id}");
//            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ServiceMethodResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Update Service Method
//        /// </summary>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ServiceMethodResponse> ServiceMethodPUTAsync(string id, ServiceMethodUpdate body)
//        {
//            return ServiceMethodPUTAsync(id, body, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Update Service Method
//        /// </summary>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ServiceMethodResponse> ServiceMethodPUTAsync(string id, ServiceMethodUpdate body, System.Threading.CancellationToken cancellationToken)
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/ServiceMethod/{id}");
//            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = System.Text.Json.JsonSerializer.Serialize(body, _settings.Value);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("PUT");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ServiceMethodResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Delete Service Method
//        /// </summary>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<DeletedResponse> ServiceMethodDELETEAsync(string id)
//        {
//            return ServiceMethodDELETEAsync(id, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Delete Service Method
//        /// </summary>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<DeletedResponse> ServiceMethodDELETEAsync(string id, System.Threading.CancellationToken cancellationToken)
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/ServiceMethod/{id}");
//            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<DeletedResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        protected struct ObjectResponseResult<T>
//        {
//            public ObjectResponseResult(T responseObject, string responseText)
//            {
//                this.Object = responseObject;
//                this.Text = responseText;
//            }

//            public T Object { get; }

//            public string Text { get; }
//        }

//        public bool ReadResponseAsString { get; set; }

//        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
//        {
//            if (response == null || response.Content == null)
//            {
//                return new ObjectResponseResult<T>(default(T), string.Empty);
//            }

//            if (ReadResponseAsString)
//            {
//                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
//                try
//                {
//                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
//                    return new ObjectResponseResult<T>(typedBody, responseText);
//                }
//                catch (System.Text.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
//                }
//            }
//            else
//            {
//                try
//                {
//                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
//                    {
//                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
//                        return new ObjectResponseResult<T>(typedBody, string.Empty);
//                    }
//                }
//                catch (System.Text.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
//                }
//            }
//        }

//        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
//        {
//            if (value == null)
//            {
//                return "";
//            }

//            if (value is System.Enum)
//            {
//                var name = System.Enum.GetName(value.GetType(), value);
//                if (name != null)
//                {
//                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
//                    if (field != null)
//                    {
//                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
//                            as System.Runtime.Serialization.EnumMemberAttribute;
//                        if (attribute != null)
//                        {
//                            return attribute.Value != null ? attribute.Value : name;
//                        }
//                    }

//                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
//                    return converted == null ? string.Empty : converted;
//                }
//            }
//            else if (value is bool)
//            {
//                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
//            }
//            else if (value is byte[])
//            {
//                return System.Convert.ToBase64String((byte[])value);
//            }
//            else if (value.GetType().IsArray)
//            {
//                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
//                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
//            }

//            var result = System.Convert.ToString(value, cultureInfo);
//            return result == null ? "" : result;
//        }
//    }

//    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class SettingClient
//    {
//        private System.Net.Http.HttpClient _httpClient;
//        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

//        public SettingClient(System.Net.Http.HttpClient httpClient)
//        {
//            _httpClient = httpClient;
//            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings);
//        }

//        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
//        {
//            var settings = new System.Text.Json.JsonSerializerOptions();
//            UpdateJsonSerializerSettings(settings);
//            return settings;
//        }

//        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

//        partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
//        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

//        /// <summary>
//        /// Get all Setting
//        /// </summary>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<object>> SettingAllAsync()
//        {
//            return SettingAllAsync(System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Get all Setting
//        /// </summary>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<object>> SettingAllAsync(System.Threading.CancellationToken cancellationToken)
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/Setting");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<object>>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Create a setting
//        /// </summary>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ServiceResponse> SettingPOSTAsync(SettingCreate body)
//        {
//            return SettingPOSTAsync(body, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Create a setting
//        /// </summary>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ServiceResponse> SettingPOSTAsync(SettingCreate body, System.Threading.CancellationToken cancellationToken)
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/Setting");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = System.Text.Json.JsonSerializer.Serialize(body, _settings.Value);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("POST");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ServiceResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Get one
//        /// </summary>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<ServiceResponse> SettingGETAsync(string name)
//        {
//            return SettingGETAsync(name, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Get one
//        /// </summary>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ServiceResponse> SettingGETAsync(string name, System.Threading.CancellationToken cancellationToken)
//        {
//            if (name == null)
//                throw new System.ArgumentNullException("name");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/Setting/{name}");
//            urlBuilder_.Replace("{name}", System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture)));

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ServiceResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Update setting
//        /// </summary>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task SettingPUTAsync(string name, SettingUpdate body)
//        {
//            return SettingPUTAsync(name, body, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Update setting
//        /// </summary>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task SettingPUTAsync(string name, SettingUpdate body, System.Threading.CancellationToken cancellationToken)
//        {
//            if (name == null)
//                throw new System.ArgumentNullException("name");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/Setting/{name}");
//            urlBuilder_.Replace("{name}", System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture)));

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = System.Text.Json.JsonSerializer.Serialize(body, _settings.Value);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("PUT");

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            return;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <summary>
//        /// Delete setting
//        /// </summary>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task SettingDELETEAsync(string name)
//        {
//            return SettingDELETEAsync(name, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <summary>
//        /// Delete setting
//        /// </summary>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task SettingDELETEAsync(string name, System.Threading.CancellationToken cancellationToken)
//        {
//            if (name == null)
//                throw new System.ArgumentNullException("name");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/Setting/{name}");
//            urlBuilder_.Replace("{name}", System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture)));

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            return;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        protected struct ObjectResponseResult<T>
//        {
//            public ObjectResponseResult(T responseObject, string responseText)
//            {
//                this.Object = responseObject;
//                this.Text = responseText;
//            }

//            public T Object { get; }

//            public string Text { get; }
//        }

//        public bool ReadResponseAsString { get; set; }

//        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
//        {
//            if (response == null || response.Content == null)
//            {
//                return new ObjectResponseResult<T>(default(T), string.Empty);
//            }

//            if (ReadResponseAsString)
//            {
//                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
//                try
//                {
//                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
//                    return new ObjectResponseResult<T>(typedBody, responseText);
//                }
//                catch (System.Text.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
//                }
//            }
//            else
//            {
//                try
//                {
//                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
//                    {
//                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
//                        return new ObjectResponseResult<T>(typedBody, string.Empty);
//                    }
//                }
//                catch (System.Text.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
//                }
//            }
//        }

//        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
//        {
//            if (value == null)
//            {
//                return "";
//            }

//            if (value is System.Enum)
//            {
//                var name = System.Enum.GetName(value.GetType(), value);
//                if (name != null)
//                {
//                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
//                    if (field != null)
//                    {
//                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
//                            as System.Runtime.Serialization.EnumMemberAttribute;
//                        if (attribute != null)
//                        {
//                            return attribute.Value != null ? attribute.Value : name;
//                        }
//                    }

//                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
//                    return converted == null ? string.Empty : converted;
//                }
//            }
//            else if (value is bool)
//            {
//                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
//            }
//            else if (value is byte[])
//            {
//                return System.Convert.ToBase64String((byte[])value);
//            }
//            else if (value.GetType().IsArray)
//            {
//                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
//                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
//            }

//            var result = System.Convert.ToString(value, cultureInfo);
//            return result == null ? "" : result;
//        }
//    }

//    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class SubscriptionsClient
//    {
//        private System.Net.Http.HttpClient _httpClient;
//        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

//        public SubscriptionsClient(System.Net.Http.HttpClient httpClient)
//        {
//            _httpClient = httpClient;
//            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings);
//        }

//        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
//        {
//            var settings = new System.Text.Json.JsonSerializerOptions();
//            UpdateJsonSerializerSettings(settings);
//            return settings;
//        }

//        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

//        partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
//        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SubscriptionResponse>> SubscriptionsAllAsync()
//        {
//            return SubscriptionsAllAsync(System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SubscriptionResponse>> SubscriptionsAllAsync(System.Threading.CancellationToken cancellationToken)
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/Subscriptions");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<SubscriptionResponse>>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<SubscriptionResponse> SubscriptionsGETAsync(string id)
//        {
//            return SubscriptionsGETAsync(id, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<SubscriptionResponse> SubscriptionsGETAsync(string id, System.Threading.CancellationToken cancellationToken)
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/Subscriptions/{id}");
//            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<SubscriptionResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<SubscriptionResponse> SubscriptionsDELETEAsync(string id)
//        {
//            return SubscriptionsDELETEAsync(id, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<SubscriptionResponse> SubscriptionsDELETEAsync(string id, System.Threading.CancellationToken cancellationToken)
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/Subscriptions/{id}");
//            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<SubscriptionResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 400)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<SubscriptionResponse> PauseAsync(string id)
//        {
//            return PauseAsync(id, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<SubscriptionResponse> PauseAsync(string id, System.Threading.CancellationToken cancellationToken)
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/Subscriptions/pause/{id}");
//            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "text/plain");
//                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<SubscriptionResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 400)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<SubscriptionResponse> ResumeAsync(string id)
//        {
//            return ResumeAsync(id, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<SubscriptionResponse> ResumeAsync(string id, System.Threading.CancellationToken cancellationToken)
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/Subscriptions/resume/{id}");
//            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "text/plain");
//                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<SubscriptionResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 400)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        protected struct ObjectResponseResult<T>
//        {
//            public ObjectResponseResult(T responseObject, string responseText)
//            {
//                this.Object = responseObject;
//                this.Text = responseText;
//            }

//            public T Object { get; }

//            public string Text { get; }
//        }

//        public bool ReadResponseAsString { get; set; }

//        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
//        {
//            if (response == null || response.Content == null)
//            {
//                return new ObjectResponseResult<T>(default(T), string.Empty);
//            }

//            if (ReadResponseAsString)
//            {
//                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
//                try
//                {
//                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
//                    return new ObjectResponseResult<T>(typedBody, responseText);
//                }
//                catch (System.Text.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
//                }
//            }
//            else
//            {
//                try
//                {
//                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
//                    {
//                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
//                        return new ObjectResponseResult<T>(typedBody, string.Empty);
//                    }
//                }
//                catch (System.Text.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
//                }
//            }
//        }

//        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
//        {
//            if (value == null)
//            {
//                return "";
//            }

//            if (value is System.Enum)
//            {
//                var name = System.Enum.GetName(value.GetType(), value);
//                if (name != null)
//                {
//                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
//                    if (field != null)
//                    {
//                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
//                            as System.Runtime.Serialization.EnumMemberAttribute;
//                        if (attribute != null)
//                        {
//                            return attribute.Value != null ? attribute.Value : name;
//                        }
//                    }

//                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
//                    return converted == null ? string.Empty : converted;
//                }
//            }
//            else if (value is bool)
//            {
//                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
//            }
//            else if (value is byte[])
//            {
//                return System.Convert.ToBase64String((byte[])value);
//            }
//            else if (value.GetType().IsArray)
//            {
//                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
//                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
//            }

//            var result = System.Convert.ToString(value, cultureInfo);
//            return result == null ? "" : result;
//        }
//    }

//    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class UserClient
//    {
//        private System.Net.Http.HttpClient _httpClient;
//        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

//        public UserClient(System.Net.Http.HttpClient httpClient)
//        {
//            _httpClient = httpClient;
//            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings);
//        }

//        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
//        {
//            var settings = new System.Text.Json.JsonSerializerOptions();
//            UpdateJsonSerializerSettings(settings);
//            return settings;
//        }

//        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

//        partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
//        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<UserResponse> UserAsync()
//        {
//            return UserAsync(System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<UserResponse> UserAsync(System.Threading.CancellationToken cancellationToken)
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/User");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<UserResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual System.Threading.Tasks.Task<UserResponse> AssignRoleAsync(RoleAssign body)
//        {
//            return AssignRoleAsync(body, System.Threading.CancellationToken.None);
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<UserResponse> AssignRoleAsync(RoleAssign body, System.Threading.CancellationToken cancellationToken)
//        {
//            var urlBuilder_ = new System.Text.StringBuilder();
//            urlBuilder_.Append("api/User/assignRole");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = System.Text.Json.JsonSerializer.Serialize(body, _settings.Value);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("POST");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<UserResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        if (status_ == 401)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        if (status_ == 400)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        protected struct ObjectResponseResult<T>
//        {
//            public ObjectResponseResult(T responseObject, string responseText)
//            {
//                this.Object = responseObject;
//                this.Text = responseText;
//            }

//            public T Object { get; }

//            public string Text { get; }
//        }

//        public bool ReadResponseAsString { get; set; }

//        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
//        {
//            if (response == null || response.Content == null)
//            {
//                return new ObjectResponseResult<T>(default(T), string.Empty);
//            }

//            if (ReadResponseAsString)
//            {
//                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
//                try
//                {
//                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
//                    return new ObjectResponseResult<T>(typedBody, responseText);
//                }
//                catch (System.Text.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
//                }
//            }
//            else
//            {
//                try
//                {
//                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
//                    {
//                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
//                        return new ObjectResponseResult<T>(typedBody, string.Empty);
//                    }
//                }
//                catch (System.Text.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
//                }
//            }
//        }

//        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
//        {
//            if (value == null)
//            {
//                return "";
//            }

//            if (value is System.Enum)
//            {
//                var name = System.Enum.GetName(value.GetType(), value);
//                if (name != null)
//                {
//                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
//                    if (field != null)
//                    {
//                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
//                            as System.Runtime.Serialization.EnumMemberAttribute;
//                        if (attribute != null)
//                        {
//                            return attribute.Value != null ? attribute.Value : name;
//                        }
//                    }

//                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
//                    return converted == null ? string.Empty : converted;
//                }
//            }
//            else if (value is bool)
//            {
//                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
//            }
//            else if (value is byte[])
//            {
//                return System.Convert.ToBase64String((byte[])value);
//            }
//            else if (value.GetType().IsArray)
//            {
//                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
//                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
//            }

//            var result = System.Convert.ToString(value, cultureInfo);
//            return result == null ? "" : result;
//        }
//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class AccessTokenResponse
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("tokenType")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string TokenType { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("accessToken")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        public string AccessToken { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("expiresIn")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        public long ExpiresIn { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("refreshToken")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        public string RefreshToken { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class CheckoutOptions
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("planId")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        [System.ComponentModel.DataAnnotations.Required]
//        public string PlanId { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("successUrl")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string SuccessUrl { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("cancelUrl")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string CancelUrl { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class CheckoutResponse
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("url")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Url { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ConfirmEmailRequest
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("email")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        public string Email { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("changedEmail")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string ChangedEmail { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("code")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        public string Code { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public enum ConnectionType
//    {

//        [System.Runtime.Serialization.EnumMember(Value = @"Server")]
//        Server = 0,

//        [System.Runtime.Serialization.EnumMember(Value = @"Local")]
//        Local = 1,

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class DeletedResponse
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("id")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Id { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("deleted")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool Deleted { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class EventRequestResponse
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("id")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        public string Id { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("status")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        public string Status { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("details")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Details { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.DateTimeOffset CreatedAt { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ForgotPasswordRequest
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("email")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        public string Email { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("returnUrl")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        public string ReturnUrl { get; set; } = "https://localhost:7584/resetPassword";

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class HttpValidationProblemDetails
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("type")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Type { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("title")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Title { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("status")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public int? Status { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("detail")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Detail { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("instance")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Instance { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("errors")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>> Errors { get; set; }

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [System.Text.Json.Serialization.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class InfoRequest
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("newEmail")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string NewEmail { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("newPassword")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string NewPassword { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("oldPassword")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string OldPassword { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("returnUrl")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        [System.ComponentModel.DataAnnotations.Required]
//        public string ReturnUrl { get; set; } = "https://localhost:7584/confirm-email";

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class InfoResponse
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("email")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        public string Email { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isEmailConfirmed")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        public bool IsEmailConfirmed { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class LoginRequest
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("email")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        [System.ComponentModel.DataAnnotations.Required]
//        public string Email { get; set; } = "admin@gmail.com";

//        [System.Text.Json.Serialization.JsonPropertyName("password")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        [System.ComponentModel.DataAnnotations.Required]
//        public string Password { get; set; } = "Admin123*";

//        [System.Text.Json.Serialization.JsonPropertyName("twoFactorCode")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string TwoFactorCode { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("twoFactorRecoveryCode")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string TwoFactorRecoveryCode { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ModelAiCreate
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("name")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        [System.ComponentModel.DataAnnotations.Required]
//        public string Name { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("token")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Token { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("absolutePath")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string AbsolutePath { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ModelAiResponse
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("id")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Id { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("name")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Name { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("token")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Token { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("absolutePath")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string AbsolutePath { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ModelAiUpdate
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("name")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        [System.ComponentModel.DataAnnotations.Required]
//        public string Name { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("token")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Token { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("absolutePath")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string AbsolutePath { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ModelGatewayCreate
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("name")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        [System.ComponentModel.DataAnnotations.Required]
//        public string Name { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("url")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        [System.ComponentModel.DataAnnotations.Required]
//        public string Url { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("token")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        [System.ComponentModel.DataAnnotations.Required]
//        public string Token { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isDefault")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsDefault { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ModelGatewayResponse
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("id")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Id { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("name")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Name { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("url")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Url { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("token")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Token { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isDefault")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsDefault { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ModelGatewayUpdate
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("name")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        [System.ComponentModel.DataAnnotations.Required]
//        public string Name { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("url")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        [System.ComponentModel.DataAnnotations.Required]
//        public string Url { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("token")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        [System.ComponentModel.DataAnnotations.Required]
//        public string Token { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class PlanCreate
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("priceId")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        [System.ComponentModel.DataAnnotations.Required]
//        public string PriceId { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("planServices")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        [System.ComponentModel.DataAnnotations.Required]
//        [System.ComponentModel.DataAnnotations.MinLength(1)]
//        public System.Collections.Generic.ICollection<PlanServicesCreate> PlanServices { get; set; } = new System.Collections.ObjectModel.Collection<PlanServicesCreate>();

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class PlanGrouping
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("productId")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string ProductId { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("billingPeriod")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string BillingPeriod { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("amount")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public double Amount { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("active")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool Active { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("services")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.Collections.Generic.ICollection<PlanServicesResponse> Services { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class PlanResponse
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("id")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Id { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("productName")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string ProductName { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("productId")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string ProductId { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("billingPeriod")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string BillingPeriod { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("numberRequests")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public int NumberRequests { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("amount")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public double Amount { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("active")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool Active { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("description")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Description { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("images")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.Collections.Generic.ICollection<string> Images { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("updatedAt")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.DateTimeOffset UpdatedAt { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.DateTimeOffset CreatedAt { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("planServices")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.Collections.Generic.ICollection<PlanServicesResponse> PlanServices { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class PlanServicesCreate
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("numberRequests")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        [System.ComponentModel.DataAnnotations.Range(10D, 2147483647D)]
//        public long NumberRequests { get; set; } = 0L;

//        [System.Text.Json.Serialization.JsonPropertyName("scope")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public int Scope { get; set; } = 1;

//        [System.Text.Json.Serialization.JsonPropertyName("processor")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
//        public ProcessorType Processor { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("connectionType")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
//        public ConnectionType ConnectionType { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("serviceId")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        [System.ComponentModel.DataAnnotations.Required]
//        public string ServiceId { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class PlanServicesResponse
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("serviceId")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string ServiceId { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("name")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Name { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("token")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Token { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("absolutePath")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string AbsolutePath { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("numberRequests")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public long NumberRequests { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("processor")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
//        public ProcessorType Processor { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("connectionType")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
//        public ConnectionType ConnectionType { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class PlanServicesUpdate
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("numberRequests")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public long NumberRequests { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("scope")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public int Scope { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("processor")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
//        public ProcessorType Processor { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("connectionType")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
//        public ConnectionType ConnectionType { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("serviceId")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        [System.ComponentModel.DataAnnotations.Required]
//        public string ServiceId { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class PlanUpdate
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("active")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool Active { get; set; } = true;

//        [System.Text.Json.Serialization.JsonPropertyName("reLoadFromStripe")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool ReLoadFromStripe { get; set; } = false;

//        [System.Text.Json.Serialization.JsonPropertyName("planServices")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.Collections.Generic.ICollection<PlanServicesUpdate> PlanServices { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class PriceCreate
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("productId")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        [System.ComponentModel.DataAnnotations.Required]
//        public string ProductId { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("currency")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        [System.ComponentModel.DataAnnotations.Required]
//        public string Currency { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("unitAmount")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        public long UnitAmount { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("interval")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        [System.ComponentModel.DataAnnotations.Required]
//        public string Interval { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class PriceResponse
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("id")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Id { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("object")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Object { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("active")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool Active { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("currency")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Currency { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("interval")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Interval { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("unitAmountDecimal")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public double UnitAmountDecimal { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("unitAmount")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public long UnitAmount { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class PriceSearchOptions
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("expand")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.Collections.Generic.ICollection<string> Expand { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("extraParams")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.Collections.Generic.IDictionary<string, object> ExtraParams { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("limit")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public long? Limit { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("page")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Page { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("query")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Query { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class PriceUpdate
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("active")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool Active { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("lookupKey")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string LookupKey { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ProblemDetails
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("type")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Type { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("title")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Title { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("status")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public int? Status { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("detail")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Detail { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("instance")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Instance { get; set; }

//        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

//        [System.Text.Json.Serialization.JsonExtensionData]
//        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
//        {
//            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
//            set { _additionalProperties = value; }
//        }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public enum ProcessorType
//    {

//        [System.Runtime.Serialization.EnumMember(Value = @"Gpu")]
//        Gpu = 0,

//        [System.Runtime.Serialization.EnumMember(Value = @"Cpu")]
//        Cpu = 1,

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ProductCreate
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("name")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Name { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("description")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Description { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ProductResponse
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("id")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Id { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("name")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Name { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("object")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Object { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("active")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool Active { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("description")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Description { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("deleted")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool? Deleted { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("images")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.Collections.Generic.ICollection<string> Images { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("shippable")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool? Shippable { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("type")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Type { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("unitLabel")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string UnitLabel { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("url")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Url { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ProductUpdate
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("name")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Name { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("active")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool Active { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("description")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Description { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("images")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.Collections.Generic.ICollection<string> Images { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("shippable")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool? Shippable { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("unitLabel")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string UnitLabel { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class RefreshRequest
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("refreshToken")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        public string RefreshToken { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class RegisterRequest
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("firsName")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        [System.ComponentModel.DataAnnotations.Required]
//        public string FirsName { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("lastName")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string LastName { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("phoneNumber")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        [System.ComponentModel.DataAnnotations.Required]
//        public string PhoneNumber { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("email")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        [System.ComponentModel.DataAnnotations.Required]
//        [System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength = 1)]
//        public string Email { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("password")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        [System.ComponentModel.DataAnnotations.Required]
//        [System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength = 1)]
//        public string Password { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("confirmPassword")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string ConfirmPassword { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("avatar")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Avatar { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("returnUrl")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        [System.ComponentModel.DataAnnotations.Required]
//        public string ReturnUrl { get; set; } = "https://localhost:7584/confirm-email";

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class RequestAllowed
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("numberRequests")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public long NumberRequests { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("currentNumberRequests")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public long CurrentNumberRequests { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("allowed")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool Allowed { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class RequestCreate
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("value")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        [System.ComponentModel.DataAnnotations.Required]
//        public string Value { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("serviceId")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        [System.ComponentModel.DataAnnotations.Required]
//        public string ServiceId { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class RequestResponse
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("id")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        public string Id { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("status")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        public string Status { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("question")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        public string Question { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("answer")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Answer { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("modelGateway")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string ModelGateway { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("modelAi")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string ModelAi { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("user")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        [System.ComponentModel.DataAnnotations.Required]
//        public UserResponse User { get; set; } = new UserResponse();

//        [System.Text.Json.Serialization.JsonPropertyName("subscription")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        [System.ComponentModel.DataAnnotations.Required]
//        public SubscriptionResponse Subscription { get; set; } = new SubscriptionResponse();

//        [System.Text.Json.Serialization.JsonPropertyName("service")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        [System.ComponentModel.DataAnnotations.Required]
//        public ServiceResponse Service { get; set; } = new ServiceResponse();

//        [System.Text.Json.Serialization.JsonPropertyName("events")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.Collections.Generic.ICollection<EventRequestResponse> Events { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.DateTimeOffset CreatedAt { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("updatedAt")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.DateTimeOffset UpdatedAt { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ResendConfirmationEmailRequest
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("email")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        public string Email { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("returnUrl")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        public string ReturnUrl { get; set; } = "https://localhost:7584/confirm-email";

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ResetPasswordRequest
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("email")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        public string Email { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("resetCode")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        public string ResetCode { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("newPassword")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        public string NewPassword { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ResultRequest
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("token")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        public string Token { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("result")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Result { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("status")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Status { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class RoleAssign
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("email")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        [System.ComponentModel.DataAnnotations.Required]
//        public string Email { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("roleId")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        [System.ComponentModel.DataAnnotations.Required]
//        public string RoleId { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class RoleCreate
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("name")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        [System.ComponentModel.DataAnnotations.Required]
//        public string Name { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class RolePermitionAssign
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("roleId")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        [System.ComponentModel.DataAnnotations.Required]
//        public string RoleId { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("permissions")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        [System.ComponentModel.DataAnnotations.Required]
//        [System.ComponentModel.DataAnnotations.MinLength(1)]
//        public System.Collections.Generic.ICollection<string> Permissions { get; set; } = new System.Collections.ObjectModel.Collection<string>();

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class RoleResponse
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("id")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Id { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("name")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Name { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("permissions")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.Collections.Generic.ICollection<string> Permissions { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ServiceCreate
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("name")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        [System.ComponentModel.DataAnnotations.Required]
//        public string Name { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("token")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        [System.ComponentModel.DataAnnotations.Required]
//        public string Token { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("modelAiId")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string ModelAiId { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ServiceMethodCreate
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("serviceId")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        [System.ComponentModel.DataAnnotations.Required]
//        public string ServiceId { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("method")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        [System.ComponentModel.DataAnnotations.Required]
//        public string Method { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("inputParameters")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.Collections.Generic.ICollection<string> InputParameters { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("outputParameters")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.Collections.Generic.ICollection<string> OutputParameters { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("inputs")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Inputs { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("outputs")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Outputs { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ServiceMethodResponse
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("id")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        public string Id { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("method")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        public string Method { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("inputParameters")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.Collections.Generic.ICollection<string> InputParameters { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("outputParameters")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.Collections.Generic.ICollection<string> OutputParameters { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ServiceMethodUpdate
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("method")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        public string Method { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("inputParameters")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.Collections.Generic.ICollection<string> InputParameters { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("outputParameters")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.Collections.Generic.ICollection<string> OutputParameters { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("inputs")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Inputs { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("outputs")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Outputs { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ServiceResponse
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("id")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Id { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("name")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Name { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("token")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Token { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("modelAiId")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string ModelAiId { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ServiceUpdate
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("name")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        [System.ComponentModel.DataAnnotations.Required]
//        public string Name { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("token")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        [System.ComponentModel.DataAnnotations.Required]
//        public string Token { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("modelAiId")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        [System.ComponentModel.DataAnnotations.Required]
//        public string ModelAiId { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class SessionCreate
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("returnUrl")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        [System.ComponentModel.DataAnnotations.Required]
//        public string ReturnUrl { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class SettingCreate
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("name")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        [System.ComponentModel.DataAnnotations.Required]
//        public string Name { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("value")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Value { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class SettingUpdate
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("value")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Value { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class SubscriptionResponse
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("id")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Id { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("userId")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string UserId { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("planId")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string PlanId { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("customerId")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string CustomerId { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("billingPeriod")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string BillingPeriod { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("startDate")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.DateTimeOffset StartDate { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("status")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Status { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("cancelAtPeriodEnd")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool CancelAtPeriodEnd { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("plan")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public PlanResponse Plan { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class TokenValidationRequest
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("token")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        public string Token { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("publicKey")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        public string PublicKey { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class TwoFactorRequest
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("enable")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool? Enable { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("twoFactorCode")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string TwoFactorCode { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("resetSharedKey")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool ResetSharedKey { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("resetRecoveryCodes")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool ResetRecoveryCodes { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("forgetMachine")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool ForgetMachine { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class TwoFactorResponse
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("sharedKey")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        public string SharedKey { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("recoveryCodesLeft")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        public int RecoveryCodesLeft { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("recoveryCodes")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public System.Collections.Generic.ICollection<string> RecoveryCodes { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isTwoFactorEnabled")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        public bool IsTwoFactorEnabled { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isMachineRemembered")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        public bool IsMachineRemembered { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class UserResponse
//    {

//        [System.Text.Json.Serialization.JsonPropertyName("email")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
//        public string Email { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("customerId")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string CustomerId { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("subscriptionId")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string SubscriptionId { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("phoneNumber")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string PhoneNumber { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isEmailConfirmed")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsEmailConfirmed { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("isPhoneNumberConfirmed")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public bool IsPhoneNumberConfirmed { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("role")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public string Role { get; set; }

//        [System.Text.Json.Serialization.JsonPropertyName("subscription")]

//        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
//        public SubscriptionResponse Subscription { get; set; }

//    }



//    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ApiException : System.Exception
//    {
//        public int StatusCode { get; private set; }

//        public string Response { get; private set; }

//        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

//        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
//            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
//        {
//            StatusCode = statusCode;
//            Response = response;
//            Headers = headers;
//        }

//        public override string ToString()
//        {
//            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
//        }
//    }

//    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ApiException<TResult> : ApiException
//    {
//        public TResult Result { get; private set; }

//        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
//            : base(message, statusCode, response, headers, innerException)
//        {
//            Result = result;
//        }
//    }

//}

//#pragma warning restore 1591
//#pragma warning restore 1573
//#pragma warning restore 472
//#pragma warning restore 114
//#pragma warning restore 108
//#pragma warning restore 3016
//#pragma warning restore 8603